
STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d64  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000e94  08000e94  00010e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ec0  08000ec0  00010ec8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ec0  08000ec0  00010ec8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ec0  08000ec8  00010ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ec0  08000ec0  00010ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ec4  08000ec4  00010ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000ec8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000ec8  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ec8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010ef1  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011a8  00000000  00000000  00010f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005c8  00000000  00000000  000120dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000988  00000000  00000000  000126a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001a0  00000000  00000000  00013030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000158  00000000  00000000  000131d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000935  00000000  00000000  00013328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000022ef  00000000  00000000  00013c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000096b0  00000000  00000000  00015f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000051c  00000000  00000000  0001f5fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e7c 	.word	0x08000e7c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e7c 	.word	0x08000e7c

08000170 <delay_ms>:
 *  Author: Marco
 */

#include "lcd.h"

void delay_ms(uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <LCD_GPIO_init>:
GPIO_PinConfig_t PinCfg ;
void LCD_GPIO_init() {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80001b0:	4b52      	ldr	r3, [pc, #328]	; (80002fc <LCD_GPIO_init+0x150>)
 80001b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001b6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001b8:	4b50      	ldr	r3, [pc, #320]	; (80002fc <LCD_GPIO_init+0x150>)
 80001ba:	2204      	movs	r2, #4
 80001bc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001be:	4b4f      	ldr	r3, [pc, #316]	; (80002fc <LCD_GPIO_init+0x150>)
 80001c0:	2201      	movs	r2, #1
 80001c2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001c4:	494d      	ldr	r1, [pc, #308]	; (80002fc <LCD_GPIO_init+0x150>)
 80001c6:	484e      	ldr	r0, [pc, #312]	; (8000300 <LCD_GPIO_init+0x154>)
 80001c8:	f000 fcf6 	bl	8000bb8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80001cc:	4b4b      	ldr	r3, [pc, #300]	; (80002fc <LCD_GPIO_init+0x150>)
 80001ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001d2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d4:	4b49      	ldr	r3, [pc, #292]	; (80002fc <LCD_GPIO_init+0x150>)
 80001d6:	2204      	movs	r2, #4
 80001d8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001da:	4b48      	ldr	r3, [pc, #288]	; (80002fc <LCD_GPIO_init+0x150>)
 80001dc:	2201      	movs	r2, #1
 80001de:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001e0:	4946      	ldr	r1, [pc, #280]	; (80002fc <LCD_GPIO_init+0x150>)
 80001e2:	4847      	ldr	r0, [pc, #284]	; (8000300 <LCD_GPIO_init+0x154>)
 80001e4:	f000 fce8 	bl	8000bb8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 80001e8:	4b44      	ldr	r3, [pc, #272]	; (80002fc <LCD_GPIO_init+0x150>)
 80001ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001ee:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001f0:	4b42      	ldr	r3, [pc, #264]	; (80002fc <LCD_GPIO_init+0x150>)
 80001f2:	2204      	movs	r2, #4
 80001f4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001f6:	4b41      	ldr	r3, [pc, #260]	; (80002fc <LCD_GPIO_init+0x150>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001fc:	493f      	ldr	r1, [pc, #252]	; (80002fc <LCD_GPIO_init+0x150>)
 80001fe:	4840      	ldr	r0, [pc, #256]	; (8000300 <LCD_GPIO_init+0x154>)
 8000200:	f000 fcda 	bl	8000bb8 <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000204:	4b3d      	ldr	r3, [pc, #244]	; (80002fc <LCD_GPIO_init+0x150>)
 8000206:	2201      	movs	r2, #1
 8000208:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800020a:	4b3c      	ldr	r3, [pc, #240]	; (80002fc <LCD_GPIO_init+0x150>)
 800020c:	2204      	movs	r2, #4
 800020e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000210:	4b3a      	ldr	r3, [pc, #232]	; (80002fc <LCD_GPIO_init+0x150>)
 8000212:	2201      	movs	r2, #1
 8000214:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000216:	4939      	ldr	r1, [pc, #228]	; (80002fc <LCD_GPIO_init+0x150>)
 8000218:	4839      	ldr	r0, [pc, #228]	; (8000300 <LCD_GPIO_init+0x154>)
 800021a:	f000 fccd 	bl	8000bb8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800021e:	4b37      	ldr	r3, [pc, #220]	; (80002fc <LCD_GPIO_init+0x150>)
 8000220:	2202      	movs	r2, #2
 8000222:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000224:	4b35      	ldr	r3, [pc, #212]	; (80002fc <LCD_GPIO_init+0x150>)
 8000226:	2204      	movs	r2, #4
 8000228:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800022a:	4b34      	ldr	r3, [pc, #208]	; (80002fc <LCD_GPIO_init+0x150>)
 800022c:	2201      	movs	r2, #1
 800022e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000230:	4932      	ldr	r1, [pc, #200]	; (80002fc <LCD_GPIO_init+0x150>)
 8000232:	4833      	ldr	r0, [pc, #204]	; (8000300 <LCD_GPIO_init+0x154>)
 8000234:	f000 fcc0 	bl	8000bb8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000238:	4b30      	ldr	r3, [pc, #192]	; (80002fc <LCD_GPIO_init+0x150>)
 800023a:	2204      	movs	r2, #4
 800023c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800023e:	4b2f      	ldr	r3, [pc, #188]	; (80002fc <LCD_GPIO_init+0x150>)
 8000240:	2204      	movs	r2, #4
 8000242:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000244:	4b2d      	ldr	r3, [pc, #180]	; (80002fc <LCD_GPIO_init+0x150>)
 8000246:	2201      	movs	r2, #1
 8000248:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800024a:	492c      	ldr	r1, [pc, #176]	; (80002fc <LCD_GPIO_init+0x150>)
 800024c:	482c      	ldr	r0, [pc, #176]	; (8000300 <LCD_GPIO_init+0x154>)
 800024e:	f000 fcb3 	bl	8000bb8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000252:	4b2a      	ldr	r3, [pc, #168]	; (80002fc <LCD_GPIO_init+0x150>)
 8000254:	2208      	movs	r2, #8
 8000256:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000258:	4b28      	ldr	r3, [pc, #160]	; (80002fc <LCD_GPIO_init+0x150>)
 800025a:	2204      	movs	r2, #4
 800025c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800025e:	4b27      	ldr	r3, [pc, #156]	; (80002fc <LCD_GPIO_init+0x150>)
 8000260:	2201      	movs	r2, #1
 8000262:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000264:	4925      	ldr	r1, [pc, #148]	; (80002fc <LCD_GPIO_init+0x150>)
 8000266:	4826      	ldr	r0, [pc, #152]	; (8000300 <LCD_GPIO_init+0x154>)
 8000268:	f000 fca6 	bl	8000bb8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 800026c:	4b23      	ldr	r3, [pc, #140]	; (80002fc <LCD_GPIO_init+0x150>)
 800026e:	2210      	movs	r2, #16
 8000270:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000272:	4b22      	ldr	r3, [pc, #136]	; (80002fc <LCD_GPIO_init+0x150>)
 8000274:	2204      	movs	r2, #4
 8000276:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000278:	4b20      	ldr	r3, [pc, #128]	; (80002fc <LCD_GPIO_init+0x150>)
 800027a:	2201      	movs	r2, #1
 800027c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800027e:	491f      	ldr	r1, [pc, #124]	; (80002fc <LCD_GPIO_init+0x150>)
 8000280:	481f      	ldr	r0, [pc, #124]	; (8000300 <LCD_GPIO_init+0x154>)
 8000282:	f000 fc99 	bl	8000bb8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000286:	4b1d      	ldr	r3, [pc, #116]	; (80002fc <LCD_GPIO_init+0x150>)
 8000288:	2220      	movs	r2, #32
 800028a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <LCD_GPIO_init+0x150>)
 800028e:	2204      	movs	r2, #4
 8000290:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000292:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <LCD_GPIO_init+0x150>)
 8000294:	2201      	movs	r2, #1
 8000296:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000298:	4918      	ldr	r1, [pc, #96]	; (80002fc <LCD_GPIO_init+0x150>)
 800029a:	4819      	ldr	r0, [pc, #100]	; (8000300 <LCD_GPIO_init+0x154>)
 800029c:	f000 fc8c 	bl	8000bb8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80002a0:	4b16      	ldr	r3, [pc, #88]	; (80002fc <LCD_GPIO_init+0x150>)
 80002a2:	2240      	movs	r2, #64	; 0x40
 80002a4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002a6:	4b15      	ldr	r3, [pc, #84]	; (80002fc <LCD_GPIO_init+0x150>)
 80002a8:	2204      	movs	r2, #4
 80002aa:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002ac:	4b13      	ldr	r3, [pc, #76]	; (80002fc <LCD_GPIO_init+0x150>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002b2:	4912      	ldr	r1, [pc, #72]	; (80002fc <LCD_GPIO_init+0x150>)
 80002b4:	4812      	ldr	r0, [pc, #72]	; (8000300 <LCD_GPIO_init+0x154>)
 80002b6:	f000 fc7f 	bl	8000bb8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <LCD_GPIO_init+0x150>)
 80002bc:	2290      	movs	r2, #144	; 0x90
 80002be:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002c0:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <LCD_GPIO_init+0x150>)
 80002c2:	2204      	movs	r2, #4
 80002c4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002c6:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <LCD_GPIO_init+0x150>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002cc:	490b      	ldr	r1, [pc, #44]	; (80002fc <LCD_GPIO_init+0x150>)
 80002ce:	480c      	ldr	r0, [pc, #48]	; (8000300 <LCD_GPIO_init+0x154>)
 80002d0:	f000 fc72 	bl	8000bb8 <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002da:	4809      	ldr	r0, [pc, #36]	; (8000300 <LCD_GPIO_init+0x154>)
 80002dc:	f000 fceb 	bl	8000cb6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e6:	4806      	ldr	r0, [pc, #24]	; (8000300 <LCD_GPIO_init+0x154>)
 80002e8:	f000 fce5 	bl	8000cb6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f2:	4803      	ldr	r0, [pc, #12]	; (8000300 <LCD_GPIO_init+0x154>)
 80002f4:	f000 fcdf 	bl	8000cb6 <MCAL_GPIO_WritePin>

}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	2000001c 	.word	0x2000001c
 8000300:	40010800 	.word	0x40010800

08000304 <LCD_clear_screen>:

void LCD_clear_screen() {
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000308:	2001      	movs	r0, #1
 800030a:	f000 f857 	bl	80003bc <LCD_WRITE_COMMAND>
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000318:	2201      	movs	r2, #1
 800031a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031e:	4807      	ldr	r0, [pc, #28]	; (800033c <LCD_lcd_kick+0x28>)
 8000320:	f000 fcc9 	bl	8000cb6 <MCAL_GPIO_WritePin>
	delay_ms(50);
 8000324:	2032      	movs	r0, #50	; 0x32
 8000326:	f7ff ff23 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000330:	4802      	ldr	r0, [pc, #8]	; (800033c <LCD_lcd_kick+0x28>)
 8000332:	f000 fcc0 	bl	8000cb6 <MCAL_GPIO_WritePin>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40010800 	.word	0x40010800

08000340 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	460a      	mov	r2, r1
 800034a:	71fb      	strb	r3, [r7, #7]
 800034c:	4613      	mov	r3, r2
 800034e:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d108      	bne.n	8000368 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 8000356:	79bb      	ldrb	r3, [r7, #6]
 8000358:	2b0f      	cmp	r3, #15
 800035a:	d805      	bhi.n	8000368 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 800035c:	79bb      	ldrb	r3, [r7, #6]
 800035e:	3b80      	subs	r3, #128	; 0x80
 8000360:	b2db      	uxtb	r3, r3
 8000362:	4618      	mov	r0, r3
 8000364:	f000 f82a 	bl	80003bc <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	2b02      	cmp	r3, #2
 800036c:	d108      	bne.n	8000380 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 800036e:	79bb      	ldrb	r3, [r7, #6]
 8000370:	2b0f      	cmp	r3, #15
 8000372:	d805      	bhi.n	8000380 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000374:	79bb      	ldrb	r3, [r7, #6]
 8000376:	3b40      	subs	r3, #64	; 0x40
 8000378:	b2db      	uxtb	r3, r3
 800037a:	4618      	mov	r0, r3
 800037c:	f000 f81e 	bl	80003bc <LCD_WRITE_COMMAND>
		}
	}
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <LCD_INIT>:

void LCD_INIT() {
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

	delay_ms(20);
 800038c:	2014      	movs	r0, #20
 800038e:	f7ff feef 	bl	8000170 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 8000392:	f7ff ff0b 	bl	80001ac <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 8000396:	200f      	movs	r0, #15
 8000398:	f7ff feea 	bl	8000170 <delay_ms>

	LCD_clear_screen();
 800039c:	f7ff ffb2 	bl	8000304 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80003a0:	2038      	movs	r0, #56	; 0x38
 80003a2:	f000 f80b 	bl	80003bc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80003a6:	2006      	movs	r0, #6
 80003a8:	f000 f808 	bl	80003bc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80003ac:	2080      	movs	r0, #128	; 0x80
 80003ae:	f000 f805 	bl	80003bc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80003b2:	200f      	movs	r0, #15
 80003b4:	f000 f802 	bl	80003bc <LCD_WRITE_COMMAND>
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}

080003bc <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	4619      	mov	r1, r3
 80003cc:	480b      	ldr	r0, [pc, #44]	; (80003fc <LCD_WRITE_COMMAND+0x40>)
 80003ce:	f000 fc89 	bl	8000ce4 <MCAL_GPIO_WritePort>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003d8:	4808      	ldr	r0, [pc, #32]	; (80003fc <LCD_WRITE_COMMAND+0x40>)
 80003da:	f000 fc6c 	bl	8000cb6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e4:	4805      	ldr	r0, [pc, #20]	; (80003fc <LCD_WRITE_COMMAND+0x40>)
 80003e6:	f000 fc66 	bl	8000cb6 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 80003ea:	2001      	movs	r0, #1
 80003ec:	f7ff fec0 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 80003f0:	f7ff ff90 	bl	8000314 <LCD_lcd_kick>

}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40010800 	.word	0x40010800

08000400 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	b29b      	uxth	r3, r3
 800040e:	4619      	mov	r1, r3
 8000410:	480b      	ldr	r0, [pc, #44]	; (8000440 <LCD_WRITE_CHAR+0x40>)
 8000412:	f000 fc67 	bl	8000ce4 <MCAL_GPIO_WritePort>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800041c:	4808      	ldr	r0, [pc, #32]	; (8000440 <LCD_WRITE_CHAR+0x40>)
 800041e:	f000 fc4a 	bl	8000cb6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000422:	2201      	movs	r2, #1
 8000424:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000428:	4805      	ldr	r0, [pc, #20]	; (8000440 <LCD_WRITE_CHAR+0x40>)
 800042a:	f000 fc44 	bl	8000cb6 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 800042e:	2001      	movs	r0, #1
 8000430:	f7ff fe9e 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 8000434:	f7ff ff6e 	bl	8000314 <LCD_lcd_kick>
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40010800 	.word	0x40010800

08000444 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	int count = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000450:	e01c      	b.n	800048c <LCD_WRITE_STRING+0x48>
		count++;
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	3301      	adds	r3, #1
 8000456:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	1c5a      	adds	r2, r3, #1
 800045c:	607a      	str	r2, [r7, #4]
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ffcd 	bl	8000400 <LCD_WRITE_CHAR>
		if (count == 16) {
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	2b10      	cmp	r3, #16
 800046a:	d104      	bne.n	8000476 <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 800046c:	2100      	movs	r1, #0
 800046e:	2002      	movs	r0, #2
 8000470:	f7ff ff66 	bl	8000340 <LCD_GOTO_XY>
 8000474:	e00a      	b.n	800048c <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2b20      	cmp	r3, #32
 800047a:	d107      	bne.n	800048c <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 800047c:	f7ff ff42 	bl	8000304 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 8000480:	2100      	movs	r1, #0
 8000482:	2001      	movs	r0, #1
 8000484:	f7ff ff5c 	bl	8000340 <LCD_GOTO_XY>
			count = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d1de      	bne.n	8000452 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000494:	bf00      	nop
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <Enalbe_NVIC>:
 * =================================================================
 * 					Generic Functions
 * =================================================================
 */
void Enalbe_NVIC(uint16_t IRQ)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80004aa:	88fb      	ldrh	r3, [r7, #6]
 80004ac:	2b0f      	cmp	r3, #15
 80004ae:	d854      	bhi.n	800055a <Enalbe_NVIC+0xba>
 80004b0:	a201      	add	r2, pc, #4	; (adr r2, 80004b8 <Enalbe_NVIC+0x18>)
 80004b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b6:	bf00      	nop
 80004b8:	080004f9 	.word	0x080004f9
 80004bc:	08000507 	.word	0x08000507
 80004c0:	08000515 	.word	0x08000515
 80004c4:	08000523 	.word	0x08000523
 80004c8:	08000531 	.word	0x08000531
 80004cc:	0800053f 	.word	0x0800053f
 80004d0:	0800053f 	.word	0x0800053f
 80004d4:	0800053f 	.word	0x0800053f
 80004d8:	0800053f 	.word	0x0800053f
 80004dc:	0800053f 	.word	0x0800053f
 80004e0:	0800054d 	.word	0x0800054d
 80004e4:	0800054d 	.word	0x0800054d
 80004e8:	0800054d 	.word	0x0800054d
 80004ec:	0800054d 	.word	0x0800054d
 80004f0:	0800054d 	.word	0x0800054d
 80004f4:	0800054d 	.word	0x0800054d
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80004f8:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <Enalbe_NVIC+0xc4>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a19      	ldr	r2, [pc, #100]	; (8000564 <Enalbe_NVIC+0xc4>)
 80004fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000502:	6013      	str	r3, [r2, #0]
		break;
 8000504:	e029      	b.n	800055a <Enalbe_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <Enalbe_NVIC+0xc4>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a16      	ldr	r2, [pc, #88]	; (8000564 <Enalbe_NVIC+0xc4>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	6013      	str	r3, [r2, #0]
		break;
 8000512:	e022      	b.n	800055a <Enalbe_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <Enalbe_NVIC+0xc4>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a12      	ldr	r2, [pc, #72]	; (8000564 <Enalbe_NVIC+0xc4>)
 800051a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800051e:	6013      	str	r3, [r2, #0]
		break;
 8000520:	e01b      	b.n	800055a <Enalbe_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <Enalbe_NVIC+0xc4>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <Enalbe_NVIC+0xc4>)
 8000528:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800052c:	6013      	str	r3, [r2, #0]
		break;
 800052e:	e014      	b.n	800055a <Enalbe_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <Enalbe_NVIC+0xc4>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <Enalbe_NVIC+0xc4>)
 8000536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800053a:	6013      	str	r3, [r2, #0]
		break;
 800053c:	e00d      	b.n	800055a <Enalbe_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <Enalbe_NVIC+0xc4>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a08      	ldr	r2, [pc, #32]	; (8000564 <Enalbe_NVIC+0xc4>)
 8000544:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000548:	6013      	str	r3, [r2, #0]
		break;
 800054a:	e006      	b.n	800055a <Enalbe_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <Enalbe_NVIC+0xc8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a05      	ldr	r2, [pc, #20]	; (8000568 <Enalbe_NVIC+0xc8>)
 8000552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000556:	6013      	str	r3, [r2, #0]
		break;
 8000558:	bf00      	nop

	}
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	e000e100 	.word	0xe000e100
 8000568:	e000e104 	.word	0xe000e104

0800056c <Disalbe_NVIC>:
void Disalbe_NVIC(uint16_t IRQ)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000576:	88fb      	ldrh	r3, [r7, #6]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d854      	bhi.n	8000626 <Disalbe_NVIC+0xba>
 800057c:	a201      	add	r2, pc, #4	; (adr r2, 8000584 <Disalbe_NVIC+0x18>)
 800057e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000582:	bf00      	nop
 8000584:	080005c5 	.word	0x080005c5
 8000588:	080005d3 	.word	0x080005d3
 800058c:	080005e1 	.word	0x080005e1
 8000590:	080005ef 	.word	0x080005ef
 8000594:	080005fd 	.word	0x080005fd
 8000598:	0800060b 	.word	0x0800060b
 800059c:	0800060b 	.word	0x0800060b
 80005a0:	0800060b 	.word	0x0800060b
 80005a4:	0800060b 	.word	0x0800060b
 80005a8:	0800060b 	.word	0x0800060b
 80005ac:	08000619 	.word	0x08000619
 80005b0:	08000619 	.word	0x08000619
 80005b4:	08000619 	.word	0x08000619
 80005b8:	08000619 	.word	0x08000619
 80005bc:	08000619 	.word	0x08000619
 80005c0:	08000619 	.word	0x08000619
		{
		case 0:
			NVIC_IRQ6_EXTI0_Disable;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <Disalbe_NVIC+0xc4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a19      	ldr	r2, [pc, #100]	; (8000630 <Disalbe_NVIC+0xc4>)
 80005ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ce:	6013      	str	r3, [r2, #0]
			break;
 80005d0:	e029      	b.n	8000626 <Disalbe_NVIC+0xba>
		case 1:
			NVIC_IRQ7_EXTI1_Disable;
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <Disalbe_NVIC+0xc4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a16      	ldr	r2, [pc, #88]	; (8000630 <Disalbe_NVIC+0xc4>)
 80005d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005dc:	6013      	str	r3, [r2, #0]
			break;
 80005de:	e022      	b.n	8000626 <Disalbe_NVIC+0xba>
		case 2:
			NVIC_IRQ8_EXTI2_Disable;
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <Disalbe_NVIC+0xc4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <Disalbe_NVIC+0xc4>)
 80005e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ea:	6013      	str	r3, [r2, #0]
			break;
 80005ec:	e01b      	b.n	8000626 <Disalbe_NVIC+0xba>
		case 3:
			NVIC_IRQ9_EXTI3_Disable;
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <Disalbe_NVIC+0xc4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <Disalbe_NVIC+0xc4>)
 80005f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f8:	6013      	str	r3, [r2, #0]
			break;
 80005fa:	e014      	b.n	8000626 <Disalbe_NVIC+0xba>
		case 4:
			NVIC_IRQ10_EXTI4_Disable;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <Disalbe_NVIC+0xc4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <Disalbe_NVIC+0xc4>)
 8000602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000606:	6013      	str	r3, [r2, #0]
			break;
 8000608:	e00d      	b.n	8000626 <Disalbe_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			NVIC_IRQ23_EXTI5_9_Disable;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <Disalbe_NVIC+0xc4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a08      	ldr	r2, [pc, #32]	; (8000630 <Disalbe_NVIC+0xc4>)
 8000610:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000614:	6013      	str	r3, [r2, #0]
			break;
 8000616:	e006      	b.n	8000626 <Disalbe_NVIC+0xba>
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			NVIC_IRQ40_EXTI10_15_Disable;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <Disalbe_NVIC+0xc8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a05      	ldr	r2, [pc, #20]	; (8000634 <Disalbe_NVIC+0xc8>)
 800061e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000622:	6013      	str	r3, [r2, #0]
			break;
 8000624:	bf00      	nop

		}
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	e000e180 	.word	0xe000e180
 8000634:	e000e184 	.word	0xe000e184

08000638 <Update_EXTI>:

void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	// 1- Configure GPIO to be AF input --> Floating input
	GPIO_PinConfig_t PinCfg;
	// Update the GPIO Pin to be floating input
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	891b      	ldrh	r3, [r3, #8]
 8000644:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000646:	2301      	movs	r3, #1
 8000648:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinCfg);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	4611      	mov	r1, r2
 8000654:	4618      	mov	r0, r3
 8000656:	f000 faaf 	bl	8000bb8 <MCAL_GPIO_Init>
	//=======================================================
	// 2- Update AFIO To Route between EXTI line with PORT A, B, C, D
	uint8_t AFIO_EXICR_Index = EXTI_Config->EXTI_PIN.EXT_InputNumber/4;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	089b      	lsrs	r3, r3, #2
 8000660:	b29b      	uxth	r3, r3
 8000662:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXICR_Position = (EXTI_Config->EXTI_PIN.EXT_InputNumber % 4)* 4;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	f003 0303 	and.w	r3, r3, #3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	73bb      	strb	r3, [r7, #14]
	// Clear the four bit
	AFIO->EXTICR[AFIO_EXICR_Index] &= ~(0xf << AFIO_EXICR_Position);
 8000674:	4a5f      	ldr	r2, [pc, #380]	; (80007f4 <Update_EXTI+0x1bc>)
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	3302      	adds	r3, #2
 800067a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	210f      	movs	r1, #15
 8000682:	fa01 f303 	lsl.w	r3, r1, r3
 8000686:	43db      	mvns	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	495a      	ldr	r1, [pc, #360]	; (80007f4 <Update_EXTI+0x1bc>)
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	4002      	ands	r2, r0
 8000690:	3302      	adds	r3, #2
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXICR_Index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port)& 0xF) << AFIO_EXICR_Position);
 8000696:	4a57      	ldr	r2, [pc, #348]	; (80007f4 <Update_EXTI+0x1bc>)
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	3302      	adds	r3, #2
 800069c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	4954      	ldr	r1, [pc, #336]	; (80007f8 <Update_EXTI+0x1c0>)
 80006a6:	428b      	cmp	r3, r1
 80006a8:	d016      	beq.n	80006d8 <Update_EXTI+0xa0>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	4953      	ldr	r1, [pc, #332]	; (80007fc <Update_EXTI+0x1c4>)
 80006b0:	428b      	cmp	r3, r1
 80006b2:	d00f      	beq.n	80006d4 <Update_EXTI+0x9c>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	4951      	ldr	r1, [pc, #324]	; (8000800 <Update_EXTI+0x1c8>)
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d008      	beq.n	80006d0 <Update_EXTI+0x98>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	4950      	ldr	r1, [pc, #320]	; (8000804 <Update_EXTI+0x1cc>)
 80006c4:	428b      	cmp	r3, r1
 80006c6:	d101      	bne.n	80006cc <Update_EXTI+0x94>
 80006c8:	2303      	movs	r3, #3
 80006ca:	e006      	b.n	80006da <Update_EXTI+0xa2>
 80006cc:	2300      	movs	r3, #0
 80006ce:	e004      	b.n	80006da <Update_EXTI+0xa2>
 80006d0:	2302      	movs	r3, #2
 80006d2:	e002      	b.n	80006da <Update_EXTI+0xa2>
 80006d4:	2301      	movs	r3, #1
 80006d6:	e000      	b.n	80006da <Update_EXTI+0xa2>
 80006d8:	2300      	movs	r3, #0
 80006da:	7bb9      	ldrb	r1, [r7, #14]
 80006dc:	408b      	lsls	r3, r1
 80006de:	4618      	mov	r0, r3
 80006e0:	4944      	ldr	r1, [pc, #272]	; (80007f4 <Update_EXTI+0x1bc>)
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	4302      	orrs	r2, r0
 80006e6:	3302      	adds	r3, #2
 80006e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//=============================================================
	//3- Update Rising or falling Register
	EXTI->RTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXT_InputNumber);
 80006ec:	4b46      	ldr	r3, [pc, #280]	; (8000808 <Update_EXTI+0x1d0>)
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	8812      	ldrh	r2, [r2, #0]
 80006f4:	4611      	mov	r1, r2
 80006f6:	2201      	movs	r2, #1
 80006f8:	408a      	lsls	r2, r1
 80006fa:	43d2      	mvns	r2, r2
 80006fc:	4611      	mov	r1, r2
 80006fe:	4a42      	ldr	r2, [pc, #264]	; (8000808 <Update_EXTI+0x1d0>)
 8000700:	400b      	ands	r3, r1
 8000702:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXT_InputNumber);
 8000704:	4b40      	ldr	r3, [pc, #256]	; (8000808 <Update_EXTI+0x1d0>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	8812      	ldrh	r2, [r2, #0]
 800070c:	4611      	mov	r1, r2
 800070e:	2201      	movs	r2, #1
 8000710:	408a      	lsls	r2, r1
 8000712:	43d2      	mvns	r2, r2
 8000714:	4611      	mov	r1, r2
 8000716:	4a3c      	ldr	r2, [pc, #240]	; (8000808 <Update_EXTI+0x1d0>)
 8000718:	400b      	ands	r3, r1
 800071a:	60d3      	str	r3, [r2, #12]
	if(EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7b1b      	ldrb	r3, [r3, #12]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d10b      	bne.n	800073c <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXT_InputNumber);
 8000724:	4b38      	ldr	r3, [pc, #224]	; (8000808 <Update_EXTI+0x1d0>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	8812      	ldrh	r2, [r2, #0]
 800072c:	4611      	mov	r1, r2
 800072e:	2201      	movs	r2, #1
 8000730:	408a      	lsls	r2, r1
 8000732:	4611      	mov	r1, r2
 8000734:	4a34      	ldr	r2, [pc, #208]	; (8000808 <Update_EXTI+0x1d0>)
 8000736:	430b      	orrs	r3, r1
 8000738:	6093      	str	r3, [r2, #8]
 800073a:	e029      	b.n	8000790 <Update_EXTI+0x158>
	}else if(EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7b1b      	ldrb	r3, [r3, #12]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d10b      	bne.n	800075c <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXT_InputNumber);
 8000744:	4b30      	ldr	r3, [pc, #192]	; (8000808 <Update_EXTI+0x1d0>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	8812      	ldrh	r2, [r2, #0]
 800074c:	4611      	mov	r1, r2
 800074e:	2201      	movs	r2, #1
 8000750:	408a      	lsls	r2, r1
 8000752:	4611      	mov	r1, r2
 8000754:	4a2c      	ldr	r2, [pc, #176]	; (8000808 <Update_EXTI+0x1d0>)
 8000756:	430b      	orrs	r3, r1
 8000758:	60d3      	str	r3, [r2, #12]
 800075a:	e019      	b.n	8000790 <Update_EXTI+0x158>

	}else if(EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFaling)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	7b1b      	ldrb	r3, [r3, #12]
 8000760:	2b02      	cmp	r3, #2
 8000762:	d115      	bne.n	8000790 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXT_InputNumber);
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <Update_EXTI+0x1d0>)
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	8812      	ldrh	r2, [r2, #0]
 800076c:	4611      	mov	r1, r2
 800076e:	2201      	movs	r2, #1
 8000770:	408a      	lsls	r2, r1
 8000772:	4611      	mov	r1, r2
 8000774:	4a24      	ldr	r2, [pc, #144]	; (8000808 <Update_EXTI+0x1d0>)
 8000776:	430b      	orrs	r3, r1
 8000778:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXT_InputNumber);
 800077a:	4b23      	ldr	r3, [pc, #140]	; (8000808 <Update_EXTI+0x1d0>)
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	8812      	ldrh	r2, [r2, #0]
 8000782:	4611      	mov	r1, r2
 8000784:	2201      	movs	r2, #1
 8000786:	408a      	lsls	r2, r1
 8000788:	4611      	mov	r1, r2
 800078a:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <Update_EXTI+0x1d0>)
 800078c:	430b      	orrs	r3, r1
 800078e:	60d3      	str	r3, [r2, #12]
	}
	//=============================================================
	//4- Update IRQ Handling CallBack
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXT_InputNumber] = EXTI_Config->P_IRQ_CallBack;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	691b      	ldr	r3, [r3, #16]
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <Update_EXTI+0x1d4>)
 800079c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//=============================================================
	//5- Enable/Disable EXTI & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	7b5b      	ldrb	r3, [r3, #13]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d110      	bne.n	80007ca <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXT_InputNumber);
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <Update_EXTI+0x1d0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	8812      	ldrh	r2, [r2, #0]
 80007b0:	4611      	mov	r1, r2
 80007b2:	2201      	movs	r2, #1
 80007b4:	408a      	lsls	r2, r1
 80007b6:	4611      	mov	r1, r2
 80007b8:	4a13      	ldr	r2, [pc, #76]	; (8000808 <Update_EXTI+0x1d0>)
 80007ba:	430b      	orrs	r3, r1
 80007bc:	6013      	str	r3, [r2, #0]
		Enalbe_NVIC(EXTI_Config->EXTI_PIN.EXT_InputNumber);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fe6c 	bl	80004a0 <Enalbe_NVIC>
	}else
	{
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXT_InputNumber);
		Disalbe_NVIC(EXTI_Config->EXTI_PIN.EXT_InputNumber);
	}
}
 80007c8:	e010      	b.n	80007ec <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXT_InputNumber);
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <Update_EXTI+0x1d0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	8812      	ldrh	r2, [r2, #0]
 80007d2:	4611      	mov	r1, r2
 80007d4:	2201      	movs	r2, #1
 80007d6:	408a      	lsls	r2, r1
 80007d8:	43d2      	mvns	r2, r2
 80007da:	4611      	mov	r1, r2
 80007dc:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <Update_EXTI+0x1d0>)
 80007de:	400b      	ands	r3, r1
 80007e0:	6013      	str	r3, [r2, #0]
		Disalbe_NVIC(EXTI_Config->EXTI_PIN.EXT_InputNumber);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fec0 	bl	800056c <Disalbe_NVIC>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40010000 	.word	0x40010000
 80007f8:	40010800 	.word	0x40010800
 80007fc:	40010c00 	.word	0x40010c00
 8000800:	40011000 	.word	0x40011000
 8000804:	40011400 	.word	0x40011400
 8000808:	40010400 	.word	0x40010400
 800080c:	20000020 	.word	0x20000020

08000810 <MCAL_EXTI_GPIO_Init>:
 * 				but LQFP48 package has only GPIO A,B,C Part of C/D exported as external PINS from MCU
 * 				- Also Mandatory to Enable RCC Clock for AFIO and the corresponding GPIO
 */

void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff0d 	bl	8000638 <Update_EXTI>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <EXTI0_IRQHandler>:
 * =================================================================
 * 					ISR Functions
 * =================================================================
 */
void EXTI0_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	//Pending Register --> cleared by writing a '1' into it
	EXTI->PR |= 1<<0;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <EXTI0_IRQHandler+0x1c>)
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <EXTI0_IRQHandler+0x1c>)
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <EXTI0_IRQHandler+0x20>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4798      	blx	r3
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40010400 	.word	0x40010400
 8000848:	20000020 	.word	0x20000020

0800084c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	//Pending Register --> cleared by writing a '1' into it
	EXTI->PR |= 1<<0;
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <EXTI1_IRQHandler+0x1c>)
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <EXTI1_IRQHandler+0x1c>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <EXTI1_IRQHandler+0x20>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4798      	blx	r3
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40010400 	.word	0x40010400
 800086c:	20000020 	.word	0x20000020

08000870 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	//Pending Register --> cleared by writing a '1' into it
	EXTI->PR |= 1<<0;
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <EXTI2_IRQHandler+0x1c>)
 8000876:	695b      	ldr	r3, [r3, #20]
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <EXTI2_IRQHandler+0x1c>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <EXTI2_IRQHandler+0x20>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4798      	blx	r3
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40010400 	.word	0x40010400
 8000890:	20000020 	.word	0x20000020

08000894 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	//Pending Register --> cleared by writing a '1' into it
	EXTI->PR |= 1<<0;
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <EXTI3_IRQHandler+0x1c>)
 800089a:	695b      	ldr	r3, [r3, #20]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <EXTI3_IRQHandler+0x1c>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <EXTI3_IRQHandler+0x20>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4798      	blx	r3
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40010400 	.word	0x40010400
 80008b4:	20000020 	.word	0x20000020

080008b8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	//Pending Register --> cleared by writing a '1' into it
	EXTI->PR |= 1<<0;
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <EXTI4_IRQHandler+0x1c>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <EXTI4_IRQHandler+0x1c>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <EXTI4_IRQHandler+0x20>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4798      	blx	r3
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40010400 	.word	0x40010400
 80008d8:	20000020 	.word	0x20000020

080008dc <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5)		{EXTI->PR |= (1<<5)		; GP_IRQ_CallBack[5]();}
 80008e0:	4b26      	ldr	r3, [pc, #152]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d008      	beq.n	80008fe <EXTI9_5_IRQHandler+0x22>
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	4a22      	ldr	r2, [pc, #136]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 80008f2:	f043 0320 	orr.w	r3, r3, #32
 80008f6:	6153      	str	r3, [r2, #20]
 80008f8:	4b21      	ldr	r3, [pc, #132]	; (8000980 <EXTI9_5_IRQHandler+0xa4>)
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	4798      	blx	r3
	if(EXTI->PR & 1<<6)		{EXTI->PR |= (1<<6)		; GP_IRQ_CallBack[6]();}
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000906:	2b00      	cmp	r3, #0
 8000908:	d008      	beq.n	800091c <EXTI9_5_IRQHandler+0x40>
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	4a1b      	ldr	r2, [pc, #108]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 8000910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000914:	6153      	str	r3, [r2, #20]
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <EXTI9_5_IRQHandler+0xa4>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4798      	blx	r3
	if(EXTI->PR & 1<<7)		{EXTI->PR |= (1<<7)		; GP_IRQ_CallBack[7]();}
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000924:	2b00      	cmp	r3, #0
 8000926:	d008      	beq.n	800093a <EXTI9_5_IRQHandler+0x5e>
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	4a13      	ldr	r2, [pc, #76]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 800092e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000932:	6153      	str	r3, [r2, #20]
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <EXTI9_5_IRQHandler+0xa4>)
 8000936:	69db      	ldr	r3, [r3, #28]
 8000938:	4798      	blx	r3
	if(EXTI->PR & 1<<8)		{EXTI->PR |= (1<<8)		; GP_IRQ_CallBack[8]();}
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000942:	2b00      	cmp	r3, #0
 8000944:	d008      	beq.n	8000958 <EXTI9_5_IRQHandler+0x7c>
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	4a0c      	ldr	r2, [pc, #48]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 800094c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000950:	6153      	str	r3, [r2, #20]
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <EXTI9_5_IRQHandler+0xa4>)
 8000954:	6a1b      	ldr	r3, [r3, #32]
 8000956:	4798      	blx	r3
	if(EXTI->PR & 1<<9)		{EXTI->PR |= (1<<9)		; GP_IRQ_CallBack[9]();}
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000960:	2b00      	cmp	r3, #0
 8000962:	d008      	beq.n	8000976 <EXTI9_5_IRQHandler+0x9a>
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <EXTI9_5_IRQHandler+0xa0>)
 800096a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800096e:	6153      	str	r3, [r2, #20]
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <EXTI9_5_IRQHandler+0xa4>)
 8000972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000974:	4798      	blx	r3
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40010400 	.word	0x40010400
 8000980:	20000020 	.word	0x20000020

08000984 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10)	{EXTI->PR |= (1<<10)	; GP_IRQ_CallBack[10]();}
 8000988:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000990:	2b00      	cmp	r3, #0
 8000992:	d008      	beq.n	80009a6 <EXTI15_10_IRQHandler+0x22>
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	4a29      	ldr	r2, [pc, #164]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 800099a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800099e:	6153      	str	r3, [r2, #20]
 80009a0:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <EXTI15_10_IRQHandler+0xc0>)
 80009a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a4:	4798      	blx	r3
	if(EXTI->PR & 1<<11)	{EXTI->PR |= (1<<11)	; GP_IRQ_CallBack[11]();}
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d008      	beq.n	80009c4 <EXTI15_10_IRQHandler+0x40>
 80009b2:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a22      	ldr	r2, [pc, #136]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009bc:	6153      	str	r3, [r2, #20]
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <EXTI15_10_IRQHandler+0xc0>)
 80009c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c2:	4798      	blx	r3
	if(EXTI->PR & 1<<12)	{EXTI->PR |= (1<<12)	; GP_IRQ_CallBack[12]();}
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d008      	beq.n	80009e2 <EXTI15_10_IRQHandler+0x5e>
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	4a1a      	ldr	r2, [pc, #104]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009da:	6153      	str	r3, [r2, #20]
 80009dc:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <EXTI15_10_IRQHandler+0xc0>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	4798      	blx	r3
	if(EXTI->PR & 1<<13)	{EXTI->PR |= (1<<13)	; GP_IRQ_CallBack[13]();}
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d008      	beq.n	8000a00 <EXTI15_10_IRQHandler+0x7c>
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 80009f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009f8:	6153      	str	r3, [r2, #20]
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <EXTI15_10_IRQHandler+0xc0>)
 80009fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fe:	4798      	blx	r3
	if(EXTI->PR & 1<<14)	{EXTI->PR |= (1<<14)	; GP_IRQ_CallBack[14]();}
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d008      	beq.n	8000a1e <EXTI15_10_IRQHandler+0x9a>
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 8000a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a16:	6153      	str	r3, [r2, #20]
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <EXTI15_10_IRQHandler+0xc0>)
 8000a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a1c:	4798      	blx	r3
	if(EXTI->PR & 1<<15)	{EXTI->PR |= (1<<15)	; GP_IRQ_CallBack[15]();}
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d008      	beq.n	8000a3c <EXTI15_10_IRQHandler+0xb8>
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <EXTI15_10_IRQHandler+0xbc>)
 8000a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a34:	6153      	str	r3, [r2, #20]
 8000a36:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <EXTI15_10_IRQHandler+0xc0>)
 8000a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a3a:	4798      	blx	r3

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40010400 	.word	0x40010400
 8000a44:	20000020 	.word	0x20000020

08000a48 <Get_CRLH_Position>:
 * ==========================================================================================
 * 					Generic Functions
 * ==========================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a58:	f000 80a5 	beq.w	8000ba6 <Get_CRLH_Position+0x15e>
 8000a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a60:	f300 80a3 	bgt.w	8000baa <Get_CRLH_Position+0x162>
 8000a64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a68:	f000 809b 	beq.w	8000ba2 <Get_CRLH_Position+0x15a>
 8000a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a70:	f300 809b 	bgt.w	8000baa <Get_CRLH_Position+0x162>
 8000a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a78:	f000 8091 	beq.w	8000b9e <Get_CRLH_Position+0x156>
 8000a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a80:	f300 8093 	bgt.w	8000baa <Get_CRLH_Position+0x162>
 8000a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a88:	f000 8087 	beq.w	8000b9a <Get_CRLH_Position+0x152>
 8000a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a90:	f300 808b 	bgt.w	8000baa <Get_CRLH_Position+0x162>
 8000a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a98:	d07d      	beq.n	8000b96 <Get_CRLH_Position+0x14e>
 8000a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a9e:	f300 8084 	bgt.w	8000baa <Get_CRLH_Position+0x162>
 8000aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aa6:	d074      	beq.n	8000b92 <Get_CRLH_Position+0x14a>
 8000aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aac:	dc7d      	bgt.n	8000baa <Get_CRLH_Position+0x162>
 8000aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ab2:	d06c      	beq.n	8000b8e <Get_CRLH_Position+0x146>
 8000ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ab8:	dc77      	bgt.n	8000baa <Get_CRLH_Position+0x162>
 8000aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000abe:	d064      	beq.n	8000b8a <Get_CRLH_Position+0x142>
 8000ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ac4:	dc71      	bgt.n	8000baa <Get_CRLH_Position+0x162>
 8000ac6:	2b90      	cmp	r3, #144	; 0x90
 8000ac8:	d05d      	beq.n	8000b86 <Get_CRLH_Position+0x13e>
 8000aca:	2b90      	cmp	r3, #144	; 0x90
 8000acc:	dc6d      	bgt.n	8000baa <Get_CRLH_Position+0x162>
 8000ace:	2b20      	cmp	r3, #32
 8000ad0:	dc48      	bgt.n	8000b64 <Get_CRLH_Position+0x11c>
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	dd69      	ble.n	8000baa <Get_CRLH_Position+0x162>
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	2b1f      	cmp	r3, #31
 8000ada:	d866      	bhi.n	8000baa <Get_CRLH_Position+0x162>
 8000adc:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <Get_CRLH_Position+0x9c>)
 8000ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae2:	bf00      	nop
 8000ae4:	08000b6b 	.word	0x08000b6b
 8000ae8:	08000b6f 	.word	0x08000b6f
 8000aec:	08000bab 	.word	0x08000bab
 8000af0:	08000b73 	.word	0x08000b73
 8000af4:	08000bab 	.word	0x08000bab
 8000af8:	08000bab 	.word	0x08000bab
 8000afc:	08000bab 	.word	0x08000bab
 8000b00:	08000b77 	.word	0x08000b77
 8000b04:	08000bab 	.word	0x08000bab
 8000b08:	08000bab 	.word	0x08000bab
 8000b0c:	08000bab 	.word	0x08000bab
 8000b10:	08000bab 	.word	0x08000bab
 8000b14:	08000bab 	.word	0x08000bab
 8000b18:	08000bab 	.word	0x08000bab
 8000b1c:	08000bab 	.word	0x08000bab
 8000b20:	08000b7b 	.word	0x08000b7b
 8000b24:	08000bab 	.word	0x08000bab
 8000b28:	08000bab 	.word	0x08000bab
 8000b2c:	08000bab 	.word	0x08000bab
 8000b30:	08000bab 	.word	0x08000bab
 8000b34:	08000bab 	.word	0x08000bab
 8000b38:	08000bab 	.word	0x08000bab
 8000b3c:	08000bab 	.word	0x08000bab
 8000b40:	08000bab 	.word	0x08000bab
 8000b44:	08000bab 	.word	0x08000bab
 8000b48:	08000bab 	.word	0x08000bab
 8000b4c:	08000bab 	.word	0x08000bab
 8000b50:	08000bab 	.word	0x08000bab
 8000b54:	08000bab 	.word	0x08000bab
 8000b58:	08000bab 	.word	0x08000bab
 8000b5c:	08000bab 	.word	0x08000bab
 8000b60:	08000b7f 	.word	0x08000b7f
 8000b64:	2b40      	cmp	r3, #64	; 0x40
 8000b66:	d00c      	beq.n	8000b82 <Get_CRLH_Position+0x13a>
 8000b68:	e01f      	b.n	8000baa <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e01e      	b.n	8000bac <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	e01c      	b.n	8000bac <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8000b72:	2308      	movs	r3, #8
 8000b74:	e01a      	b.n	8000bac <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8000b76:	230c      	movs	r3, #12
 8000b78:	e018      	b.n	8000bac <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	e016      	b.n	8000bac <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8000b7e:	2314      	movs	r3, #20
 8000b80:	e014      	b.n	8000bac <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8000b82:	2318      	movs	r3, #24
 8000b84:	e012      	b.n	8000bac <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8000b86:	231c      	movs	r3, #28
 8000b88:	e010      	b.n	8000bac <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e00e      	b.n	8000bac <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	e00c      	b.n	8000bac <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8000b92:	2308      	movs	r3, #8
 8000b94:	e00a      	b.n	8000bac <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8000b96:	230c      	movs	r3, #12
 8000b98:	e008      	b.n	8000bac <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	e006      	b.n	8000bac <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8000b9e:	2314      	movs	r3, #20
 8000ba0:	e004      	b.n	8000bac <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8000ba2:	2318      	movs	r3, #24
 8000ba4:	e002      	b.n	8000bac <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8000ba6:	231c      	movs	r3, #28
 8000ba8:	e000      	b.n	8000bac <Get_CRLH_Position+0x164>
		break;
	default:
		return 0;
 8000baa:	2300      	movs	r3, #0
	}

}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-Stem32f103C6 MCU has GPIO A, B, C, D, E Modules
 * 				 But LQFP48 Package has only GPIO A, B, PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_PinConfig_t* PinConfig)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) --> Configures PINS from 0 >> 7
	// Port configuration register High (GPIOx_CRH) --> Configures PINS from 8 >> 15
	volatile uint32_t* configRegister = NULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_config = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73fb      	strb	r3, [r7, #15]
	configRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	2bff      	cmp	r3, #255	; 0xff
 8000bd0:	d801      	bhi.n	8000bd6 <MCAL_GPIO_Init+0x1e>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	e001      	b.n	8000bda <MCAL_GPIO_Init+0x22>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	60bb      	str	r3, [r7, #8]
	//Clear CNF[1:0] MODE8[1:0]
	(*configRegister) &= ~(0xf<<Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff31 	bl	8000a48 <Get_CRLH_Position>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	230f      	movs	r3, #15
 8000bec:	4093      	lsls	r3, r2
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	601a      	str	r2, [r3, #0]
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	789b      	ldrb	r3, [r3, #2]
 8000bfe:	2b07      	cmp	r3, #7
 8000c00:	d00b      	beq.n	8000c1a <MCAL_GPIO_Init+0x62>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	789b      	ldrb	r3, [r3, #2]
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d007      	beq.n	8000c1a <MCAL_GPIO_Init+0x62>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	789b      	ldrb	r3, [r3, #2]
 8000c0e:	2b05      	cmp	r3, #5
 8000c10:	d003      	beq.n	8000c1a <MCAL_GPIO_Init+0x62>
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	789b      	ldrb	r3, [r3, #2]
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	d10e      	bne.n	8000c38 <MCAL_GPIO_Init+0x80>
	{
		//Set CNF[1:0] MODE8[1:0]
		PIN_config = ((((PinConfig->GPIO_MODE - 4)<<2) | (PinConfig->GPIO_Output_Speed)) & 0x0f);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	789b      	ldrb	r3, [r3, #2]
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	b25a      	sxtb	r2, r3
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	78db      	ldrb	r3, [r3, #3]
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	f003 030f 	and.w	r3, r3, #15
 8000c34:	73fb      	strb	r3, [r7, #15]
 8000c36:	e02c      	b.n	8000c92 <MCAL_GPIO_Init+0xda>
	}
	// if pin is input
	else // MODE = 00: input mode(reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	789b      	ldrb	r3, [r3, #2]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d003      	beq.n	8000c48 <MCAL_GPIO_Init+0x90>
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	789b      	ldrb	r3, [r3, #2]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d107      	bne.n	8000c58 <MCAL_GPIO_Init+0xa0>
		{
			//Set CNF[1:0], MODE8[1:0] = 00
			PIN_config = ((((PinConfig->GPIO_MODE)<<2) | 0x0) & 0x0f);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	789b      	ldrb	r3, [r3, #2]
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	f003 030f 	and.w	r3, r3, #15
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	e01c      	b.n	8000c92 <MCAL_GPIO_Init+0xda>

		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	789b      	ldrb	r3, [r3, #2]
 8000c5c:	2b08      	cmp	r3, #8
 8000c5e:	d102      	bne.n	8000c66 <MCAL_GPIO_Init+0xae>
		{
			//Set CNF[1:0], MODE8[1:0] = 00
			PIN_config = ( (((GPIO_MODE_INPUT_FLO)<<2) | 0x0) & 0x0f);
 8000c60:	2304      	movs	r3, #4
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e015      	b.n	8000c92 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_config = ( (((GPIO_MODE_INPUT_PU )<<2) | 0x0) & 0x0f);
 8000c66:	2308      	movs	r3, #8
 8000c68:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	789b      	ldrb	r3, [r3, #2]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d107      	bne.n	8000c82 <MCAL_GPIO_Init+0xca>
			{
				//Table 20. Port bit configuration table --> PxODR register = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber; // I make the shift in the macros itself, so I don't make here
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	8812      	ldrh	r2, [r2, #0]
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	e007      	b.n	8000c92 <MCAL_GPIO_Init+0xda>

			}else
			{
				//Table 20. Port bit configuration table --> PxODR register = 1
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber); // I make the shift in the macros itself, so I don't make here
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	8812      	ldrh	r2, [r2, #0]
 8000c8a:	43d2      	mvns	r2, r2
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	60da      	str	r2, [r3, #12]
			}
		}

	}
	// Write on the CRL or CRH
	(*configRegister) |= ((PIN_config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000c92:	7bfc      	ldrb	r4, [r7, #15]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fed5 	bl	8000a48 <Get_CRLH_Position>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	fa04 f203 	lsl.w	r2, r4, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	601a      	str	r2, [r3, #0]
}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd90      	pop	{r4, r7, pc}

08000cb6 <MCAL_GPIO_WritePin>:
 * @param [in] 	-Value: Specifies the port bit to read according @ref GPIO_PIN_define
 * @retval		-None
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	807b      	strh	r3, [r7, #2]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_PIN_RESET)
 8000cc6:	787b      	ldrb	r3, [r7, #1]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <MCAL_GPIO_WritePin+0x1e>
		 * Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		These bits are write-only and can be accessed in Word mode only.
		0: No action on the corresponding ODRx bit
		1: Set the corresponding ODRx bit
		 */
		GPIOx->BSRR = (uint32_t)PinNumber; //(uint32_t) as I write on 32-bits register
 8000ccc:	887a      	ldrh	r2, [r7, #2]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	611a      	str	r2, [r3, #16]
			0: No action on the corresponding ODRx bit
			1: Reset the corresponding ODRx bit
		 */
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8000cd2:	e002      	b.n	8000cda <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000cd4:	887a      	ldrh	r2, [r7, #2]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	615a      	str	r2, [r3, #20]
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <MCAL_GPIO_WritePort>:
 * @param [in] 	-GPIOx: Where x can be (A..E depending on device used) to select the GPIO peripheral
 * @retval		-None
 * Note			-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOx, uint16_t Value)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	460b      	mov	r3, r1
 8000cee:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 8000cf0:	887a      	ldrh	r2, [r7, #2]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60da      	str	r2, [r3, #12]
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <wait_ms>:
#include "lcd.h"
#include "keypad.h"
#include "_7segment.h"

unsigned int IRQ_Flag = 0;
void wait_ms(uint32_t time) {
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	e00b      	b.n	8000d26 <wait_ms+0x26>
		for (j = 0; j < 255; j++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	e002      	b.n	8000d1a <wait_ms+0x1a>
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	3301      	adds	r3, #1
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	2bfe      	cmp	r3, #254	; 0xfe
 8000d1e:	d9f9      	bls.n	8000d14 <wait_ms+0x14>
	for (i = 0; i < time; i++)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3301      	adds	r3, #1
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d3ef      	bcc.n	8000d0e <wait_ms+0xe>
			;
}
 8000d2e:	bf00      	nop
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
	...

08000d3c <EXTI9_Callback>:
void EXTI9_Callback(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <EXTI9_Callback+0x1c>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI9 is happened _|- );");
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <EXTI9_Callback+0x20>)
 8000d48:	f7ff fb7c 	bl	8000444 <LCD_WRITE_STRING>
	wait_ms(1000);
 8000d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d50:	f7ff ffd6 	bl	8000d00 <wait_ms>
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000005c 	.word	0x2000005c
 8000d5c:	08000e94 	.word	0x08000e94

08000d60 <main>:
int main(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0

	//Enable clock
	RCC_GPIOA_CLK_EN();
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <main+0x70>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <main+0x70>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <main+0x70>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	4a16      	ldr	r2, [pc, #88]	; (8000dd0 <main+0x70>)
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <main+0x70>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a13      	ldr	r2, [pc, #76]	; (8000dd0 <main+0x70>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6193      	str	r3, [r2, #24]

	LCD_INIT();
 8000d8a:	f7ff fafd 	bl	8000388 <LCD_INIT>
	LCD_clear_screen();
 8000d8e:	f7ff fab9 	bl	8000304 <LCD_clear_screen>

	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <main+0x74>)
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RISING;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	763b      	strb	r3, [r7, #24]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_Callback;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <main+0x78>)
 8000da4:	61fb      	str	r3, [r7, #28]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable;
 8000da6:	2301      	movs	r3, #1
 8000da8:	767b      	strb	r3, [r7, #25]

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fd2e 	bl	8000810 <MCAL_EXTI_GPIO_Init>

	IRQ_Flag = 1;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <main+0x7c>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	601a      	str	r2, [r3, #0]
	while (1) {

		if(IRQ_Flag)
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <main+0x7c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0fb      	beq.n	8000dba <main+0x5a>
		{
			LCD_clear_screen();
 8000dc2:	f7ff fa9f 	bl	8000304 <LCD_clear_screen>
			IRQ_Flag = 0;
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <main+0x7c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag)
 8000dcc:	e7f5      	b.n	8000dba <main+0x5a>
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	08000eb4 	.word	0x08000eb4
 8000dd8:	08000d3d 	.word	0x08000d3d
 8000ddc:	2000005c 	.word	0x2000005c

08000de0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000de2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dea:	490d      	ldr	r1, [pc, #52]	; (8000e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <LoopForever+0xe>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e00:	4c0a      	ldr	r4, [pc, #40]	; (8000e2c <LoopForever+0x16>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e0e:	f000 f811 	bl	8000e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e12:	f7ff ffa5 	bl	8000d60 <main>

08000e16 <LoopForever>:

LoopForever:
  b LoopForever
 8000e16:	e7fe      	b.n	8000e16 <LoopForever>
  ldr   r0, =_estack
 8000e18:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e24:	08000ec8 	.word	0x08000ec8
  ldr r2, =_sbss
 8000e28:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e2c:	20000060 	.word	0x20000060

08000e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC1_2_IRQHandler>
	...

08000e34 <__libc_init_array>:
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	2600      	movs	r6, #0
 8000e38:	4d0c      	ldr	r5, [pc, #48]	; (8000e6c <__libc_init_array+0x38>)
 8000e3a:	4c0d      	ldr	r4, [pc, #52]	; (8000e70 <__libc_init_array+0x3c>)
 8000e3c:	1b64      	subs	r4, r4, r5
 8000e3e:	10a4      	asrs	r4, r4, #2
 8000e40:	42a6      	cmp	r6, r4
 8000e42:	d109      	bne.n	8000e58 <__libc_init_array+0x24>
 8000e44:	f000 f81a 	bl	8000e7c <_init>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	4d0a      	ldr	r5, [pc, #40]	; (8000e74 <__libc_init_array+0x40>)
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	; (8000e78 <__libc_init_array+0x44>)
 8000e4e:	1b64      	subs	r4, r4, r5
 8000e50:	10a4      	asrs	r4, r4, #2
 8000e52:	42a6      	cmp	r6, r4
 8000e54:	d105      	bne.n	8000e62 <__libc_init_array+0x2e>
 8000e56:	bd70      	pop	{r4, r5, r6, pc}
 8000e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e5c:	4798      	blx	r3
 8000e5e:	3601      	adds	r6, #1
 8000e60:	e7ee      	b.n	8000e40 <__libc_init_array+0xc>
 8000e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e66:	4798      	blx	r3
 8000e68:	3601      	adds	r6, #1
 8000e6a:	e7f2      	b.n	8000e52 <__libc_init_array+0x1e>
 8000e6c:	08000ec0 	.word	0x08000ec0
 8000e70:	08000ec0 	.word	0x08000ec0
 8000e74:	08000ec0 	.word	0x08000ec0
 8000e78:	08000ec4 	.word	0x08000ec4

08000e7c <_init>:
 8000e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7e:	bf00      	nop
 8000e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e82:	bc08      	pop	{r3}
 8000e84:	469e      	mov	lr, r3
 8000e86:	4770      	bx	lr

08000e88 <_fini>:
 8000e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e8a:	bf00      	nop
 8000e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e8e:	bc08      	pop	{r3}
 8000e90:	469e      	mov	lr, r3
 8000e92:	4770      	bx	lr
