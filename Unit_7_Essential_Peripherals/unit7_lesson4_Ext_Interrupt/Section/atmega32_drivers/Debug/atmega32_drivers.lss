
atmega32_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001c4  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000954  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f6  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000481  00000000  00000000  0000139e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00001820  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045a  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024d  00000000  00000000  00001d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001fd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c8 00 	call	0x190	; 0x190 <main>
  7a:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Kick>:
}

void LCD_Kick(void)
{
	/*Enable pulse*/
	LCD_Control_Port |= (1<<EN);// Enable High
  82:	88 b3       	in	r24, 0x18	; 24
  84:	88 60       	ori	r24, 0x08	; 8
  86:	88 bb       	out	0x18, r24	; 24
		delay_ms(1);	//minimum delay of 450ns
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	LCD_Control_Port &= ~(1<<EN);//Enable Low
  90:	88 b3       	in	r24, 0x18	; 24
  92:	87 7f       	andi	r24, 0xF7	; 247
  94:	88 bb       	out	0x18, r24	; 24
  96:	08 95       	ret

00000098 <LCD_Send_A_Command>:
	LCD_Send_A_Command(LCD_ENTRY_INC);	//Auto increment
	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
}
void LCD_Send_A_Command(unsigned char command)
{
  98:	cf 93       	push	r28
  9a:	c8 2f       	mov	r28, r24
	LCD_Kick();
	delay_ms(3);
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_Data_Port = (LCD_Control_Port & 0x0F) | (command & 0xF0);//Sending upper niblle
  9c:	88 b3       	in	r24, 0x18	; 24
  9e:	8f 70       	andi	r24, 0x0F	; 15
  a0:	9c 2f       	mov	r25, r28
  a2:	90 7f       	andi	r25, 0xF0	; 240
  a4:	89 2b       	or	r24, r25
  a6:	8b bb       	out	0x1b, r24	; 27
	LCD_Control_Port &= ~(1<<RS | 1<<RW);//command register
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	89 7f       	andi	r24, 0xF9	; 249
  ac:	88 bb       	out	0x18, r24	; 24
	LCD_Kick();
  ae:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Kick>
	delay_ms(1);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	LCD_Data_Port = (LCD_Control_Port & 0x0F) | (command << 4 );//Sending upper niblle
  ba:	28 b3       	in	r18, 0x18	; 24
  bc:	30 e1       	ldi	r19, 0x10	; 16
  be:	c3 9f       	mul	r28, r19
  c0:	c0 01       	movw	r24, r0
  c2:	11 24       	eor	r1, r1
  c4:	92 2f       	mov	r25, r18
  c6:	9f 70       	andi	r25, 0x0F	; 15
  c8:	89 2b       	or	r24, r25
  ca:	8b bb       	out	0x1b, r24	; 27
	LCD_Kick();
  cc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Kick>
	delay_ms(2);
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	#endif
}
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <LCD_Init>:
 *  Author: Ali Mohamed Taima
 */ 
#include "lcd.h"
void LCD_Init(void)
{
	LCD_Control_Dir |= (1<<RS|1<<EN|1<<RW);//make control pins as output
  dc:	87 b3       	in	r24, 0x17	; 23
  de:	8e 60       	ori	r24, 0x0E	; 14
  e0:	87 bb       	out	0x17, r24	; 23
	LCD_Control_Port &= (1<<RS|1<<EN|1<<RW); //make sure that output is 0
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	8e 70       	andi	r24, 0x0E	; 14
  e6:	88 bb       	out	0x18, r24	; 24
	//make data port as output
	LCD_Data_Dir = 0xFF;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	8a bb       	out	0x1a, r24	; 26
	delay_ms(20);
  ec:	84 e1       	ldi	r24, 0x14	; 20
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	#ifdef EIGHT_BIT_MODE
	LCD_Send_A_Command(LCD_FUNCTION_8BIT_2LINES);
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_Send_A_Command(0x02); //Send for 4bit initialization of LCD
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_FUNCTION_4BIT_2LINES);
  fa:	88 e2       	ldi	r24, 0x28	; 40
  fc:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_A_Command>
	#endif
	
	LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);
 100:	8f e0       	ldi	r24, 0x0F	; 15
 102:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_ENTRY_INC);	//Auto increment
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_A_Command>
 118:	08 95       	ret

0000011a <LCD_Send_A_Character>:
	LCD_Kick();
	delay_ms(2);
	#endif
}
void LCD_Send_A_Character(unsigned char char_data)
{
 11a:	cf 93       	push	r28
 11c:	c8 2f       	mov	r28, r24
	LCD_Kick();
	delay_ms(1);
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_Data_Port = (LCD_Control_Port & 0x0F) | (char_data & 0xF0);//Sending upper niblle
 11e:	88 b3       	in	r24, 0x18	; 24
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	9c 2f       	mov	r25, r28
 124:	90 7f       	andi	r25, 0xF0	; 240
 126:	89 2b       	or	r24, r25
 128:	8b bb       	out	0x1b, r24	; 27
	LCD_Control_Port |= (1<<RS); //Data register
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	88 bb       	out	0x18, r24	; 24
	LCD_Control_Port &= ~(1<<RW);//write operation
 130:	88 b3       	in	r24, 0x18	; 24
 132:	8b 7f       	andi	r24, 0xFB	; 251
 134:	88 bb       	out	0x18, r24	; 24
	LCD_Kick();
 136:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Kick>
	delay_ms(1);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	LCD_Data_Port = (LCD_Control_Port & 0x0F) | (char_data << 4 );//Sending upper niblle
 142:	28 b3       	in	r18, 0x18	; 24
 144:	30 e1       	ldi	r19, 0x10	; 16
 146:	c3 9f       	mul	r28, r19
 148:	c0 01       	movw	r24, r0
 14a:	11 24       	eor	r1, r1
 14c:	92 2f       	mov	r25, r18
 14e:	9f 70       	andi	r25, 0x0F	; 15
 150:	89 2b       	or	r24, r25
 152:	8b bb       	out	0x1b, r24	; 27
	LCD_Kick();
 154:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Kick>
	delay_ms(2);
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 cf 00 	call	0x19e	; 0x19e <delay_ms>
	#endif
	
	
}
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <LCD_Send_A_String>:
void LCD_Send_A_String(unsigned char* str_data)
{
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	8c 01       	movw	r16, r24
	int i;
	for(i = 0;str_data[i] != 0; i++)
 16e:	c0 e0       	ldi	r28, 0x00	; 0
 170:	d0 e0       	ldi	r29, 0x00	; 0
 172:	03 c0       	rjmp	.+6      	; 0x17a <LCD_Send_A_String+0x16>
	{
		LCD_Send_A_Character(str_data[i]);
 174:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_Send_A_Character>
	
}
void LCD_Send_A_String(unsigned char* str_data)
{
	int i;
	for(i = 0;str_data[i] != 0; i++)
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	f8 01       	movw	r30, r16
 17c:	ec 0f       	add	r30, r28
 17e:	fd 1f       	adc	r31, r29
 180:	80 81       	ld	r24, Z
 182:	81 11       	cpse	r24, r1
 184:	f7 cf       	rjmp	.-18     	; 0x174 <LCD_Send_A_String+0x10>
	{
		LCD_Send_A_Character(str_data[i]);
	}
	
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	08 95       	ret

00000190 <main>:


int main(void)
{

	LCD_Init();
 190:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Init>
	LCD_Send_A_String("Learn In Depth");
 194:	80 e6       	ldi	r24, 0x60	; 96
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_Send_A_String>
 19c:	ff cf       	rjmp	.-2      	; 0x19c <main+0xc>

0000019e <delay_ms>:
}
void delay_ms(uint32_t t)
{
	uint32_t i, j;

	for(i = 0;i<t;i++)
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	0a c0       	rjmp	.+20     	; 0x1b8 <delay_ms+0x1a>
		for(j = 0; j<255; j++);
 1a4:	2f 5f       	subi	r18, 0xFF	; 255
 1a6:	3f 4f       	sbci	r19, 0xFF	; 255
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <delay_ms+0x10>
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	2f 3f       	cpi	r18, 0xFF	; 255
 1b0:	31 05       	cpc	r19, r1
 1b2:	c0 f3       	brcs	.-16     	; 0x1a4 <delay_ms+0x6>
}
void delay_ms(uint32_t t)
{
	uint32_t i, j;

	for(i = 0;i<t;i++)
 1b4:	4f 5f       	subi	r20, 0xFF	; 255
 1b6:	5f 4f       	sbci	r21, 0xFF	; 255
 1b8:	48 17       	cp	r20, r24
 1ba:	59 07       	cpc	r21, r25
 1bc:	b0 f3       	brcs	.-20     	; 0x1aa <delay_ms+0xc>
		for(j = 0; j<255; j++);
}
 1be:	08 95       	ret

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
