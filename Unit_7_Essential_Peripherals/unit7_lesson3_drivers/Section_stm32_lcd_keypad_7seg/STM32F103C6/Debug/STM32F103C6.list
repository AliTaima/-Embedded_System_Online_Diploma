
STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b4c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000c7c  08000c7c  00010c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c9c  08000c9c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c9c  08000c9c  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c9c  08000c9c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c9c  08000c9c  00010c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ca0  08000ca0  00010ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08000ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000002c  08000cd0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  08000cd0  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f73  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005a6  00000000  00000000  0002100b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000007cc  00000000  00000000  000215b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000158  00000000  00000000  00021d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000110  00000000  00000000  00021ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000176b  00000000  00000000  00021fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002019  00000000  00000000  00023753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000821c  00000000  00000000  0002576c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000414  00000000  00000000  0002d988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000002c 	.word	0x2000002c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c64 	.word	0x08000c64

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000030 	.word	0x20000030
 800016c:	08000c64 	.word	0x08000c64

08000170 <Keypad_init>:
	for (i = 0; i < time; i++)
		for (j = 0; j < 255; j++)
			;
}

void Keypad_init() {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
//	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
//	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
//	KEYPAD_PORT = 0xFF;
	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_PinNumber = R0;
 8000176:	2301      	movs	r3, #1
 8000178:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800017a:	2304      	movs	r3, #4
 800017c:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800017e:	2301      	movs	r3, #1
 8000180:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	4619      	mov	r1, r3
 8000186:	482c      	ldr	r0, [pc, #176]	; (8000238 <Keypad_init+0xc8>)
 8000188:	f000 fb72 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R1;
 800018c:	2302      	movs	r3, #2
 800018e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000190:	2304      	movs	r3, #4
 8000192:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000194:	2301      	movs	r3, #1
 8000196:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	4619      	mov	r1, r3
 800019c:	4826      	ldr	r0, [pc, #152]	; (8000238 <Keypad_init+0xc8>)
 800019e:	f000 fb67 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R2;
 80001a2:	2308      	movs	r3, #8
 80001a4:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001a6:	2304      	movs	r3, #4
 80001a8:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001aa:	2301      	movs	r3, #1
 80001ac:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4619      	mov	r1, r3
 80001b2:	4821      	ldr	r0, [pc, #132]	; (8000238 <Keypad_init+0xc8>)
 80001b4:	f000 fb5c 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R3;
 80001b8:	2310      	movs	r3, #16
 80001ba:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001bc:	2304      	movs	r3, #4
 80001be:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001c0:	2301      	movs	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4619      	mov	r1, r3
 80001c8:	481b      	ldr	r0, [pc, #108]	; (8000238 <Keypad_init+0xc8>)
 80001ca:	f000 fb51 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C0;
 80001ce:	2320      	movs	r3, #32
 80001d0:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d2:	2304      	movs	r3, #4
 80001d4:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001d6:	2301      	movs	r3, #1
 80001d8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	4619      	mov	r1, r3
 80001de:	4816      	ldr	r0, [pc, #88]	; (8000238 <Keypad_init+0xc8>)
 80001e0:	f000 fb46 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C1;
 80001e4:	2340      	movs	r3, #64	; 0x40
 80001e6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001e8:	2304      	movs	r3, #4
 80001ea:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001ec:	2301      	movs	r3, #1
 80001ee:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	4619      	mov	r1, r3
 80001f4:	4810      	ldr	r0, [pc, #64]	; (8000238 <Keypad_init+0xc8>)
 80001f6:	f000 fb3b 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C2;
 80001fa:	2390      	movs	r3, #144	; 0x90
 80001fc:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001fe:	2304      	movs	r3, #4
 8000200:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000202:	2301      	movs	r3, #1
 8000204:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4619      	mov	r1, r3
 800020a:	480b      	ldr	r0, [pc, #44]	; (8000238 <Keypad_init+0xc8>)
 800020c:	f000 fb30 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C3;
 8000210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000214:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000216:	2304      	movs	r3, #4
 8000218:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800021a:	2301      	movs	r3, #1
 800021c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4619      	mov	r1, r3
 8000222:	4805      	ldr	r0, [pc, #20]	; (8000238 <Keypad_init+0xc8>)
 8000224:	f000 fb24 	bl	8000870 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 8000228:	21ff      	movs	r1, #255	; 0xff
 800022a:	4803      	ldr	r0, [pc, #12]	; (8000238 <Keypad_init+0xc8>)
 800022c:	f000 fbcd 	bl	80009ca <MCAL_GPIO_WritePort>

}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40010c00 	.word	0x40010c00

0800023c <Keypad_getkey>:

char Keypad_getkey() {
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
	int i, j;
	for (i = 0; i < 4; i++) {
 8000242:	2300      	movs	r3, #0
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	e0b4      	b.n	80003b2 <Keypad_getkey+0x176>
//		KEYPAD_PORT |= ((1 << Key_padCol[0]) | (1 << Key_padCol[1])
//				| (1 << Key_padCol[2]) | (1 << Key_padCol[3]));
//		KEYPAD_PORT &= ~(1 << Key_padCol[i]);
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_SET);
 8000248:	4b5e      	ldr	r3, [pc, #376]	; (80003c4 <Keypad_getkey+0x188>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	b29b      	uxth	r3, r3
 800024e:	2201      	movs	r2, #1
 8000250:	4619      	mov	r1, r3
 8000252:	485d      	ldr	r0, [pc, #372]	; (80003c8 <Keypad_getkey+0x18c>)
 8000254:	f000 fba2 	bl	800099c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_SET);
 8000258:	4b5a      	ldr	r3, [pc, #360]	; (80003c4 <Keypad_getkey+0x188>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	b29b      	uxth	r3, r3
 800025e:	2201      	movs	r2, #1
 8000260:	4619      	mov	r1, r3
 8000262:	4859      	ldr	r0, [pc, #356]	; (80003c8 <Keypad_getkey+0x18c>)
 8000264:	f000 fb9a 	bl	800099c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_SET);
 8000268:	4b56      	ldr	r3, [pc, #344]	; (80003c4 <Keypad_getkey+0x188>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	b29b      	uxth	r3, r3
 800026e:	2201      	movs	r2, #1
 8000270:	4619      	mov	r1, r3
 8000272:	4855      	ldr	r0, [pc, #340]	; (80003c8 <Keypad_getkey+0x18c>)
 8000274:	f000 fb92 	bl	800099c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_SET);
 8000278:	4b52      	ldr	r3, [pc, #328]	; (80003c4 <Keypad_getkey+0x188>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	b29b      	uxth	r3, r3
 800027e:	2201      	movs	r2, #1
 8000280:	4619      	mov	r1, r3
 8000282:	4851      	ldr	r0, [pc, #324]	; (80003c8 <Keypad_getkey+0x18c>)
 8000284:	f000 fb8a 	bl	800099c <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_RESET);
 8000288:	4a4e      	ldr	r2, [pc, #312]	; (80003c4 <Keypad_getkey+0x188>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	b29b      	uxth	r3, r3
 8000292:	2200      	movs	r2, #0
 8000294:	4619      	mov	r1, r3
 8000296:	484c      	ldr	r0, [pc, #304]	; (80003c8 <Keypad_getkey+0x18c>)
 8000298:	f000 fb80 	bl	800099c <MCAL_GPIO_WritePin>
		for (j = 0; j < 4; j++) {
 800029c:	2300      	movs	r3, #0
 800029e:	603b      	str	r3, [r7, #0]
 80002a0:	e080      	b.n	80003a4 <Keypad_getkey+0x168>
			if (MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0) {
 80002a2:	4a4a      	ldr	r2, [pc, #296]	; (80003cc <Keypad_getkey+0x190>)
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	4619      	mov	r1, r3
 80002ae:	4846      	ldr	r0, [pc, #280]	; (80003c8 <Keypad_getkey+0x18c>)
 80002b0:	f000 fb5d 	bl	800096e <MCAL_GPIO_ReadPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d171      	bne.n	800039e <Keypad_getkey+0x162>
				while (MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0)
 80002ba:	bf00      	nop
 80002bc:	4a43      	ldr	r2, [pc, #268]	; (80003cc <Keypad_getkey+0x190>)
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	4619      	mov	r1, r3
 80002c8:	483f      	ldr	r0, [pc, #252]	; (80003c8 <Keypad_getkey+0x18c>)
 80002ca:	f000 fb50 	bl	800096e <MCAL_GPIO_ReadPin>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0f3      	beq.n	80002bc <Keypad_getkey+0x80>
					;
				switch (i) {
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b03      	cmp	r3, #3
 80002d8:	d861      	bhi.n	800039e <Keypad_getkey+0x162>
 80002da:	a201      	add	r2, pc, #4	; (adr r2, 80002e0 <Keypad_getkey+0xa4>)
 80002dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e0:	080002f1 	.word	0x080002f1
 80002e4:	08000319 	.word	0x08000319
 80002e8:	08000341 	.word	0x08000341
 80002ec:	08000369 	.word	0x08000369
				case (0):
					if (j == 0)
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d101      	bne.n	80002fa <Keypad_getkey+0xbe>
						return '7';
 80002f6:	2337      	movs	r3, #55	; 0x37
 80002f8:	e060      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 1)
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d101      	bne.n	8000304 <Keypad_getkey+0xc8>
						return '4';
 8000300:	2334      	movs	r3, #52	; 0x34
 8000302:	e05b      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 2)
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	2b02      	cmp	r3, #2
 8000308:	d101      	bne.n	800030e <Keypad_getkey+0xd2>
						return '1';
 800030a:	2331      	movs	r3, #49	; 0x31
 800030c:	e056      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 3)
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	2b03      	cmp	r3, #3
 8000312:	d13d      	bne.n	8000390 <Keypad_getkey+0x154>
						return '?';
 8000314:	233f      	movs	r3, #63	; 0x3f
 8000316:	e051      	b.n	80003bc <Keypad_getkey+0x180>
					break;
				case (1):
					if (j == 0)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d101      	bne.n	8000322 <Keypad_getkey+0xe6>
						return '8';
 800031e:	2338      	movs	r3, #56	; 0x38
 8000320:	e04c      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 1)
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d101      	bne.n	800032c <Keypad_getkey+0xf0>
						return '5';
 8000328:	2335      	movs	r3, #53	; 0x35
 800032a:	e047      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 2)
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	2b02      	cmp	r3, #2
 8000330:	d101      	bne.n	8000336 <Keypad_getkey+0xfa>
						return '2';
 8000332:	2332      	movs	r3, #50	; 0x32
 8000334:	e042      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 3)
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	2b03      	cmp	r3, #3
 800033a:	d12b      	bne.n	8000394 <Keypad_getkey+0x158>
						return '0';
 800033c:	2330      	movs	r3, #48	; 0x30
 800033e:	e03d      	b.n	80003bc <Keypad_getkey+0x180>
					break;
				case (2):
					if (j == 0)
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d101      	bne.n	800034a <Keypad_getkey+0x10e>
						return '9';
 8000346:	2339      	movs	r3, #57	; 0x39
 8000348:	e038      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 1)
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d101      	bne.n	8000354 <Keypad_getkey+0x118>
						return '6';
 8000350:	2336      	movs	r3, #54	; 0x36
 8000352:	e033      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 2)
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d101      	bne.n	800035e <Keypad_getkey+0x122>
						return '3';
 800035a:	2333      	movs	r3, #51	; 0x33
 800035c:	e02e      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 3)
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	2b03      	cmp	r3, #3
 8000362:	d119      	bne.n	8000398 <Keypad_getkey+0x15c>
						return '=';
 8000364:	233d      	movs	r3, #61	; 0x3d
 8000366:	e029      	b.n	80003bc <Keypad_getkey+0x180>
					break;
				case (3):
					if (j == 0)
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d101      	bne.n	8000372 <Keypad_getkey+0x136>
						return '/';
 800036e:	232f      	movs	r3, #47	; 0x2f
 8000370:	e024      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 1)
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d101      	bne.n	800037c <Keypad_getkey+0x140>
						return '*';
 8000378:	232a      	movs	r3, #42	; 0x2a
 800037a:	e01f      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 2)
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	2b02      	cmp	r3, #2
 8000380:	d101      	bne.n	8000386 <Keypad_getkey+0x14a>
						return '-';
 8000382:	232d      	movs	r3, #45	; 0x2d
 8000384:	e01a      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 3)
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	2b03      	cmp	r3, #3
 800038a:	d107      	bne.n	800039c <Keypad_getkey+0x160>
						return '+';
 800038c:	232b      	movs	r3, #43	; 0x2b
 800038e:	e015      	b.n	80003bc <Keypad_getkey+0x180>
					break;
 8000390:	bf00      	nop
 8000392:	e004      	b.n	800039e <Keypad_getkey+0x162>
					break;
 8000394:	bf00      	nop
 8000396:	e002      	b.n	800039e <Keypad_getkey+0x162>
					break;
 8000398:	bf00      	nop
 800039a:	e000      	b.n	800039e <Keypad_getkey+0x162>
					break;
 800039c:	bf00      	nop
		for (j = 0; j < 4; j++) {
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	3301      	adds	r3, #1
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	2b03      	cmp	r3, #3
 80003a8:	f77f af7b 	ble.w	80002a2 <Keypad_getkey+0x66>
	for (i = 0; i < 4; i++) {
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3301      	adds	r3, #1
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2b03      	cmp	r3, #3
 80003b6:	f77f af47 	ble.w	8000248 <Keypad_getkey+0xc>
				}
			}
		}
	}
	return 'A';
 80003ba:	2341      	movs	r3, #65	; 0x41
}
 80003bc:	4618      	mov	r0, r3
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000010 	.word	0x20000010
 80003c8:	40010c00 	.word	0x40010c00
 80003cc:	20000000 	.word	0x20000000

080003d0 <delay_ms>:
 *  Author: Marco
 */

#include "lcd.h"

void delay_ms(uint32_t time) {
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	e00b      	b.n	80003f6 <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	e002      	b.n	80003ea <delay_ms+0x1a>
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	3301      	adds	r3, #1
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	2bfe      	cmp	r3, #254	; 0xfe
 80003ee:	d9f9      	bls.n	80003e4 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	3301      	adds	r3, #1
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	68fa      	ldr	r2, [r7, #12]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d3ef      	bcc.n	80003de <delay_ms+0xe>
}
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
	...

0800040c <LCD_GPIO_init>:
GPIO_PinConfig_t PinCfg ;
void LCD_GPIO_init() {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 8000410:	4b52      	ldr	r3, [pc, #328]	; (800055c <LCD_GPIO_init+0x150>)
 8000412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000416:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000418:	4b50      	ldr	r3, [pc, #320]	; (800055c <LCD_GPIO_init+0x150>)
 800041a:	2204      	movs	r2, #4
 800041c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800041e:	4b4f      	ldr	r3, [pc, #316]	; (800055c <LCD_GPIO_init+0x150>)
 8000420:	2201      	movs	r2, #1
 8000422:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000424:	494d      	ldr	r1, [pc, #308]	; (800055c <LCD_GPIO_init+0x150>)
 8000426:	484e      	ldr	r0, [pc, #312]	; (8000560 <LCD_GPIO_init+0x154>)
 8000428:	f000 fa22 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 800042c:	4b4b      	ldr	r3, [pc, #300]	; (800055c <LCD_GPIO_init+0x150>)
 800042e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000432:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000434:	4b49      	ldr	r3, [pc, #292]	; (800055c <LCD_GPIO_init+0x150>)
 8000436:	2204      	movs	r2, #4
 8000438:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800043a:	4b48      	ldr	r3, [pc, #288]	; (800055c <LCD_GPIO_init+0x150>)
 800043c:	2201      	movs	r2, #1
 800043e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000440:	4946      	ldr	r1, [pc, #280]	; (800055c <LCD_GPIO_init+0x150>)
 8000442:	4847      	ldr	r0, [pc, #284]	; (8000560 <LCD_GPIO_init+0x154>)
 8000444:	f000 fa14 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 8000448:	4b44      	ldr	r3, [pc, #272]	; (800055c <LCD_GPIO_init+0x150>)
 800044a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800044e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000450:	4b42      	ldr	r3, [pc, #264]	; (800055c <LCD_GPIO_init+0x150>)
 8000452:	2204      	movs	r2, #4
 8000454:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000456:	4b41      	ldr	r3, [pc, #260]	; (800055c <LCD_GPIO_init+0x150>)
 8000458:	2201      	movs	r2, #1
 800045a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800045c:	493f      	ldr	r1, [pc, #252]	; (800055c <LCD_GPIO_init+0x150>)
 800045e:	4840      	ldr	r0, [pc, #256]	; (8000560 <LCD_GPIO_init+0x154>)
 8000460:	f000 fa06 	bl	8000870 <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000464:	4b3d      	ldr	r3, [pc, #244]	; (800055c <LCD_GPIO_init+0x150>)
 8000466:	2201      	movs	r2, #1
 8000468:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800046a:	4b3c      	ldr	r3, [pc, #240]	; (800055c <LCD_GPIO_init+0x150>)
 800046c:	2204      	movs	r2, #4
 800046e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000470:	4b3a      	ldr	r3, [pc, #232]	; (800055c <LCD_GPIO_init+0x150>)
 8000472:	2201      	movs	r2, #1
 8000474:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000476:	4939      	ldr	r1, [pc, #228]	; (800055c <LCD_GPIO_init+0x150>)
 8000478:	4839      	ldr	r0, [pc, #228]	; (8000560 <LCD_GPIO_init+0x154>)
 800047a:	f000 f9f9 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800047e:	4b37      	ldr	r3, [pc, #220]	; (800055c <LCD_GPIO_init+0x150>)
 8000480:	2202      	movs	r2, #2
 8000482:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000484:	4b35      	ldr	r3, [pc, #212]	; (800055c <LCD_GPIO_init+0x150>)
 8000486:	2204      	movs	r2, #4
 8000488:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800048a:	4b34      	ldr	r3, [pc, #208]	; (800055c <LCD_GPIO_init+0x150>)
 800048c:	2201      	movs	r2, #1
 800048e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000490:	4932      	ldr	r1, [pc, #200]	; (800055c <LCD_GPIO_init+0x150>)
 8000492:	4833      	ldr	r0, [pc, #204]	; (8000560 <LCD_GPIO_init+0x154>)
 8000494:	f000 f9ec 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000498:	4b30      	ldr	r3, [pc, #192]	; (800055c <LCD_GPIO_init+0x150>)
 800049a:	2204      	movs	r2, #4
 800049c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800049e:	4b2f      	ldr	r3, [pc, #188]	; (800055c <LCD_GPIO_init+0x150>)
 80004a0:	2204      	movs	r2, #4
 80004a2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004a4:	4b2d      	ldr	r3, [pc, #180]	; (800055c <LCD_GPIO_init+0x150>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80004aa:	492c      	ldr	r1, [pc, #176]	; (800055c <LCD_GPIO_init+0x150>)
 80004ac:	482c      	ldr	r0, [pc, #176]	; (8000560 <LCD_GPIO_init+0x154>)
 80004ae:	f000 f9df 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80004b2:	4b2a      	ldr	r3, [pc, #168]	; (800055c <LCD_GPIO_init+0x150>)
 80004b4:	2208      	movs	r2, #8
 80004b6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004b8:	4b28      	ldr	r3, [pc, #160]	; (800055c <LCD_GPIO_init+0x150>)
 80004ba:	2204      	movs	r2, #4
 80004bc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004be:	4b27      	ldr	r3, [pc, #156]	; (800055c <LCD_GPIO_init+0x150>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80004c4:	4925      	ldr	r1, [pc, #148]	; (800055c <LCD_GPIO_init+0x150>)
 80004c6:	4826      	ldr	r0, [pc, #152]	; (8000560 <LCD_GPIO_init+0x154>)
 80004c8:	f000 f9d2 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80004cc:	4b23      	ldr	r3, [pc, #140]	; (800055c <LCD_GPIO_init+0x150>)
 80004ce:	2210      	movs	r2, #16
 80004d0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004d2:	4b22      	ldr	r3, [pc, #136]	; (800055c <LCD_GPIO_init+0x150>)
 80004d4:	2204      	movs	r2, #4
 80004d6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004d8:	4b20      	ldr	r3, [pc, #128]	; (800055c <LCD_GPIO_init+0x150>)
 80004da:	2201      	movs	r2, #1
 80004dc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80004de:	491f      	ldr	r1, [pc, #124]	; (800055c <LCD_GPIO_init+0x150>)
 80004e0:	481f      	ldr	r0, [pc, #124]	; (8000560 <LCD_GPIO_init+0x154>)
 80004e2:	f000 f9c5 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80004e6:	4b1d      	ldr	r3, [pc, #116]	; (800055c <LCD_GPIO_init+0x150>)
 80004e8:	2220      	movs	r2, #32
 80004ea:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <LCD_GPIO_init+0x150>)
 80004ee:	2204      	movs	r2, #4
 80004f0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004f2:	4b1a      	ldr	r3, [pc, #104]	; (800055c <LCD_GPIO_init+0x150>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80004f8:	4918      	ldr	r1, [pc, #96]	; (800055c <LCD_GPIO_init+0x150>)
 80004fa:	4819      	ldr	r0, [pc, #100]	; (8000560 <LCD_GPIO_init+0x154>)
 80004fc:	f000 f9b8 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <LCD_GPIO_init+0x150>)
 8000502:	2240      	movs	r2, #64	; 0x40
 8000504:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <LCD_GPIO_init+0x150>)
 8000508:	2204      	movs	r2, #4
 800050a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800050c:	4b13      	ldr	r3, [pc, #76]	; (800055c <LCD_GPIO_init+0x150>)
 800050e:	2201      	movs	r2, #1
 8000510:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000512:	4912      	ldr	r1, [pc, #72]	; (800055c <LCD_GPIO_init+0x150>)
 8000514:	4812      	ldr	r0, [pc, #72]	; (8000560 <LCD_GPIO_init+0x154>)
 8000516:	f000 f9ab 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <LCD_GPIO_init+0x150>)
 800051c:	2290      	movs	r2, #144	; 0x90
 800051e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000520:	4b0e      	ldr	r3, [pc, #56]	; (800055c <LCD_GPIO_init+0x150>)
 8000522:	2204      	movs	r2, #4
 8000524:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <LCD_GPIO_init+0x150>)
 8000528:	2201      	movs	r2, #1
 800052a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800052c:	490b      	ldr	r1, [pc, #44]	; (800055c <LCD_GPIO_init+0x150>)
 800052e:	480c      	ldr	r0, [pc, #48]	; (8000560 <LCD_GPIO_init+0x154>)
 8000530:	f000 f99e 	bl	8000870 <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053a:	4809      	ldr	r0, [pc, #36]	; (8000560 <LCD_GPIO_init+0x154>)
 800053c:	f000 fa2e 	bl	800099c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000546:	4806      	ldr	r0, [pc, #24]	; (8000560 <LCD_GPIO_init+0x154>)
 8000548:	f000 fa28 	bl	800099c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <LCD_GPIO_init+0x154>)
 8000554:	f000 fa22 	bl	800099c <MCAL_GPIO_WritePin>

}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000048 	.word	0x20000048
 8000560:	40010800 	.word	0x40010800

08000564 <LCD_clear_screen>:

void LCD_clear_screen() {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000568:	2001      	movs	r0, #1
 800056a:	f000 f857 	bl	800061c <LCD_WRITE_COMMAND>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057e:	4807      	ldr	r0, [pc, #28]	; (800059c <LCD_lcd_kick+0x28>)
 8000580:	f000 fa0c 	bl	800099c <MCAL_GPIO_WritePin>
	delay_ms(50);
 8000584:	2032      	movs	r0, #50	; 0x32
 8000586:	f7ff ff23 	bl	80003d0 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <LCD_lcd_kick+0x28>)
 8000592:	f000 fa03 	bl	800099c <MCAL_GPIO_WritePin>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40010800 	.word	0x40010800

080005a0 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	460a      	mov	r2, r1
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	4613      	mov	r3, r2
 80005ae:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d108      	bne.n	80005c8 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 80005b6:	79bb      	ldrb	r3, [r7, #6]
 80005b8:	2b0f      	cmp	r3, #15
 80005ba:	d805      	bhi.n	80005c8 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 80005bc:	79bb      	ldrb	r3, [r7, #6]
 80005be:	3b80      	subs	r3, #128	; 0x80
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f82a 	bl	800061c <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b02      	cmp	r3, #2
 80005cc:	d108      	bne.n	80005e0 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	2b0f      	cmp	r3, #15
 80005d2:	d805      	bhi.n	80005e0 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	3b40      	subs	r3, #64	; 0x40
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f81e 	bl	800061c <LCD_WRITE_COMMAND>
		}
	}
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <LCD_INIT>:

void LCD_INIT() {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

	delay_ms(20);
 80005ec:	2014      	movs	r0, #20
 80005ee:	f7ff feef 	bl	80003d0 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 80005f2:	f7ff ff0b 	bl	800040c <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 80005f6:	200f      	movs	r0, #15
 80005f8:	f7ff feea 	bl	80003d0 <delay_ms>

	LCD_clear_screen();
 80005fc:	f7ff ffb2 	bl	8000564 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000600:	2038      	movs	r0, #56	; 0x38
 8000602:	f000 f80b 	bl	800061c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000606:	2006      	movs	r0, #6
 8000608:	f000 f808 	bl	800061c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 800060c:	2080      	movs	r0, #128	; 0x80
 800060e:	f000 f805 	bl	800061c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000612:	200f      	movs	r0, #15
 8000614:	f000 f802 	bl	800061c <LCD_WRITE_COMMAND>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}

0800061c <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	b29b      	uxth	r3, r3
 800062a:	4619      	mov	r1, r3
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <LCD_WRITE_COMMAND+0x40>)
 800062e:	f000 f9cc 	bl	80009ca <MCAL_GPIO_WritePort>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000638:	4808      	ldr	r0, [pc, #32]	; (800065c <LCD_WRITE_COMMAND+0x40>)
 800063a:	f000 f9af 	bl	800099c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000644:	4805      	ldr	r0, [pc, #20]	; (800065c <LCD_WRITE_COMMAND+0x40>)
 8000646:	f000 f9a9 	bl	800099c <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 800064a:	2001      	movs	r0, #1
 800064c:	f7ff fec0 	bl	80003d0 <delay_ms>
	LCD_lcd_kick();
 8000650:	f7ff ff90 	bl	8000574 <LCD_lcd_kick>

}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40010800 	.word	0x40010800

08000660 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	b29b      	uxth	r3, r3
 800066e:	4619      	mov	r1, r3
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <LCD_WRITE_CHAR+0x40>)
 8000672:	f000 f9aa 	bl	80009ca <MCAL_GPIO_WritePort>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067c:	4808      	ldr	r0, [pc, #32]	; (80006a0 <LCD_WRITE_CHAR+0x40>)
 800067e:	f000 f98d 	bl	800099c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <LCD_WRITE_CHAR+0x40>)
 800068a:	f000 f987 	bl	800099c <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 800068e:	2001      	movs	r0, #1
 8000690:	f7ff fe9e 	bl	80003d0 <delay_ms>
	LCD_lcd_kick();
 8000694:	f7ff ff6e 	bl	8000574 <LCD_lcd_kick>
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40010800 	.word	0x40010800

080006a4 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	int count = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 80006b0:	e01c      	b.n	80006ec <LCD_WRITE_STRING+0x48>
		count++;
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	3301      	adds	r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	607a      	str	r2, [r7, #4]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffcd 	bl	8000660 <LCD_WRITE_CHAR>
		if (count == 16) {
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b10      	cmp	r3, #16
 80006ca:	d104      	bne.n	80006d6 <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 80006cc:	2100      	movs	r1, #0
 80006ce:	2002      	movs	r0, #2
 80006d0:	f7ff ff66 	bl	80005a0 <LCD_GOTO_XY>
 80006d4:	e00a      	b.n	80006ec <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2b20      	cmp	r3, #32
 80006da:	d107      	bne.n	80006ec <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 80006dc:	f7ff ff42 	bl	8000564 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 80006e0:	2100      	movs	r1, #0
 80006e2:	2001      	movs	r0, #1
 80006e4:	f7ff ff5c 	bl	80005a0 <LCD_GOTO_XY>
			count = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1de      	bne.n	80006b2 <LCD_WRITE_STRING+0xe>
		}
	}
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <Get_CRLH_Position>:
 * ==========================================================================================
 * 					Generic Functions
 * ==========================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000710:	f000 80a5 	beq.w	800085e <Get_CRLH_Position+0x15e>
 8000714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000718:	f300 80a3 	bgt.w	8000862 <Get_CRLH_Position+0x162>
 800071c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000720:	f000 809b 	beq.w	800085a <Get_CRLH_Position+0x15a>
 8000724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000728:	f300 809b 	bgt.w	8000862 <Get_CRLH_Position+0x162>
 800072c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000730:	f000 8091 	beq.w	8000856 <Get_CRLH_Position+0x156>
 8000734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000738:	f300 8093 	bgt.w	8000862 <Get_CRLH_Position+0x162>
 800073c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000740:	f000 8087 	beq.w	8000852 <Get_CRLH_Position+0x152>
 8000744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000748:	f300 808b 	bgt.w	8000862 <Get_CRLH_Position+0x162>
 800074c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000750:	d07d      	beq.n	800084e <Get_CRLH_Position+0x14e>
 8000752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000756:	f300 8084 	bgt.w	8000862 <Get_CRLH_Position+0x162>
 800075a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800075e:	d074      	beq.n	800084a <Get_CRLH_Position+0x14a>
 8000760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000764:	dc7d      	bgt.n	8000862 <Get_CRLH_Position+0x162>
 8000766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800076a:	d06c      	beq.n	8000846 <Get_CRLH_Position+0x146>
 800076c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000770:	dc77      	bgt.n	8000862 <Get_CRLH_Position+0x162>
 8000772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000776:	d064      	beq.n	8000842 <Get_CRLH_Position+0x142>
 8000778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800077c:	dc71      	bgt.n	8000862 <Get_CRLH_Position+0x162>
 800077e:	2b90      	cmp	r3, #144	; 0x90
 8000780:	d05d      	beq.n	800083e <Get_CRLH_Position+0x13e>
 8000782:	2b90      	cmp	r3, #144	; 0x90
 8000784:	dc6d      	bgt.n	8000862 <Get_CRLH_Position+0x162>
 8000786:	2b20      	cmp	r3, #32
 8000788:	dc48      	bgt.n	800081c <Get_CRLH_Position+0x11c>
 800078a:	2b00      	cmp	r3, #0
 800078c:	dd69      	ble.n	8000862 <Get_CRLH_Position+0x162>
 800078e:	3b01      	subs	r3, #1
 8000790:	2b1f      	cmp	r3, #31
 8000792:	d866      	bhi.n	8000862 <Get_CRLH_Position+0x162>
 8000794:	a201      	add	r2, pc, #4	; (adr r2, 800079c <Get_CRLH_Position+0x9c>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	08000823 	.word	0x08000823
 80007a0:	08000827 	.word	0x08000827
 80007a4:	08000863 	.word	0x08000863
 80007a8:	0800082b 	.word	0x0800082b
 80007ac:	08000863 	.word	0x08000863
 80007b0:	08000863 	.word	0x08000863
 80007b4:	08000863 	.word	0x08000863
 80007b8:	0800082f 	.word	0x0800082f
 80007bc:	08000863 	.word	0x08000863
 80007c0:	08000863 	.word	0x08000863
 80007c4:	08000863 	.word	0x08000863
 80007c8:	08000863 	.word	0x08000863
 80007cc:	08000863 	.word	0x08000863
 80007d0:	08000863 	.word	0x08000863
 80007d4:	08000863 	.word	0x08000863
 80007d8:	08000833 	.word	0x08000833
 80007dc:	08000863 	.word	0x08000863
 80007e0:	08000863 	.word	0x08000863
 80007e4:	08000863 	.word	0x08000863
 80007e8:	08000863 	.word	0x08000863
 80007ec:	08000863 	.word	0x08000863
 80007f0:	08000863 	.word	0x08000863
 80007f4:	08000863 	.word	0x08000863
 80007f8:	08000863 	.word	0x08000863
 80007fc:	08000863 	.word	0x08000863
 8000800:	08000863 	.word	0x08000863
 8000804:	08000863 	.word	0x08000863
 8000808:	08000863 	.word	0x08000863
 800080c:	08000863 	.word	0x08000863
 8000810:	08000863 	.word	0x08000863
 8000814:	08000863 	.word	0x08000863
 8000818:	08000837 	.word	0x08000837
 800081c:	2b40      	cmp	r3, #64	; 0x40
 800081e:	d00c      	beq.n	800083a <Get_CRLH_Position+0x13a>
 8000820:	e01f      	b.n	8000862 <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8000822:	2300      	movs	r3, #0
 8000824:	e01e      	b.n	8000864 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8000826:	2304      	movs	r3, #4
 8000828:	e01c      	b.n	8000864 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 800082a:	2308      	movs	r3, #8
 800082c:	e01a      	b.n	8000864 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 800082e:	230c      	movs	r3, #12
 8000830:	e018      	b.n	8000864 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8000832:	2310      	movs	r3, #16
 8000834:	e016      	b.n	8000864 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8000836:	2314      	movs	r3, #20
 8000838:	e014      	b.n	8000864 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 800083a:	2318      	movs	r3, #24
 800083c:	e012      	b.n	8000864 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 800083e:	231c      	movs	r3, #28
 8000840:	e010      	b.n	8000864 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 8000842:	2300      	movs	r3, #0
 8000844:	e00e      	b.n	8000864 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8000846:	2304      	movs	r3, #4
 8000848:	e00c      	b.n	8000864 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 800084a:	2308      	movs	r3, #8
 800084c:	e00a      	b.n	8000864 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 800084e:	230c      	movs	r3, #12
 8000850:	e008      	b.n	8000864 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8000852:	2310      	movs	r3, #16
 8000854:	e006      	b.n	8000864 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8000856:	2314      	movs	r3, #20
 8000858:	e004      	b.n	8000864 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 800085a:	2318      	movs	r3, #24
 800085c:	e002      	b.n	8000864 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 800085e:	231c      	movs	r3, #28
 8000860:	e000      	b.n	8000864 <Get_CRLH_Position+0x164>
		break;
	default:
		return 0;
 8000862:	2300      	movs	r3, #0
	}

}
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-Stem32f103C6 MCU has GPIO A, B, C, D, E Modules
 * 				 But LQFP48 Package has only GPIO A, B, PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_PinConfig_t* PinConfig)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) --> Configures PINS from 0 >> 7
	// Port configuration register High (GPIOx_CRH) --> Configures PINS from 8 >> 15
	volatile uint32_t* configRegister = NULL;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_config = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	73fb      	strb	r3, [r7, #15]
	configRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	2bff      	cmp	r3, #255	; 0xff
 8000888:	d801      	bhi.n	800088e <MCAL_GPIO_Init+0x1e>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	e001      	b.n	8000892 <MCAL_GPIO_Init+0x22>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3304      	adds	r3, #4
 8000892:	60bb      	str	r3, [r7, #8]
	//Clear CNF[1:0] MODE8[1:0]
	(*configRegister) &= ~(0xf<<Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff31 	bl	8000700 <Get_CRLH_Position>
 800089e:	4603      	mov	r3, r0
 80008a0:	461a      	mov	r2, r3
 80008a2:	230f      	movs	r3, #15
 80008a4:	4093      	lsls	r3, r2
 80008a6:	43da      	mvns	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	401a      	ands	r2, r3
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	601a      	str	r2, [r3, #0]
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	789b      	ldrb	r3, [r3, #2]
 80008b6:	2b07      	cmp	r3, #7
 80008b8:	d00b      	beq.n	80008d2 <MCAL_GPIO_Init+0x62>
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	789b      	ldrb	r3, [r3, #2]
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d007      	beq.n	80008d2 <MCAL_GPIO_Init+0x62>
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	789b      	ldrb	r3, [r3, #2]
 80008c6:	2b05      	cmp	r3, #5
 80008c8:	d003      	beq.n	80008d2 <MCAL_GPIO_Init+0x62>
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	789b      	ldrb	r3, [r3, #2]
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	d10e      	bne.n	80008f0 <MCAL_GPIO_Init+0x80>
	{
		//Set CNF[1:0] MODE8[1:0]
		PIN_config = ((((PinConfig->GPIO_MODE - 4)<<2) | (PinConfig->GPIO_Output_Speed)) & 0x0f);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	789b      	ldrb	r3, [r3, #2]
 80008d6:	3b04      	subs	r3, #4
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	b25a      	sxtb	r2, r3
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	78db      	ldrb	r3, [r3, #3]
 80008e0:	b25b      	sxtb	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	f003 030f 	and.w	r3, r3, #15
 80008ec:	73fb      	strb	r3, [r7, #15]
 80008ee:	e02c      	b.n	800094a <MCAL_GPIO_Init+0xda>
	}
	// if pin is input
	else // MODE = 00: input mode(reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	789b      	ldrb	r3, [r3, #2]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d003      	beq.n	8000900 <MCAL_GPIO_Init+0x90>
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	789b      	ldrb	r3, [r3, #2]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d107      	bne.n	8000910 <MCAL_GPIO_Init+0xa0>
		{
			//Set CNF[1:0], MODE8[1:0] = 00
			PIN_config = ((((PinConfig->GPIO_MODE)<<2) | 0x0) & 0x0f);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	789b      	ldrb	r3, [r3, #2]
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	b2db      	uxtb	r3, r3
 8000908:	f003 030f 	and.w	r3, r3, #15
 800090c:	73fb      	strb	r3, [r7, #15]
 800090e:	e01c      	b.n	800094a <MCAL_GPIO_Init+0xda>

		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	789b      	ldrb	r3, [r3, #2]
 8000914:	2b08      	cmp	r3, #8
 8000916:	d102      	bne.n	800091e <MCAL_GPIO_Init+0xae>
		{
			//Set CNF[1:0], MODE8[1:0] = 00
			PIN_config = ( (((GPIO_MODE_INPUT_FLO)<<2) | 0x0) & 0x0f);
 8000918:	2304      	movs	r3, #4
 800091a:	73fb      	strb	r3, [r7, #15]
 800091c:	e015      	b.n	800094a <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_config = ( (((GPIO_MODE_INPUT_PU )<<2) | 0x0) & 0x0f);
 800091e:	2308      	movs	r3, #8
 8000920:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	789b      	ldrb	r3, [r3, #2]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d107      	bne.n	800093a <MCAL_GPIO_Init+0xca>
			{
				//Table 20. Port bit configuration table --> PxODR register = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber; // I make the shift in the macros itself, so I don't make here
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	8812      	ldrh	r2, [r2, #0]
 8000932:	431a      	orrs	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	e007      	b.n	800094a <MCAL_GPIO_Init+0xda>

			}else
			{
				//Table 20. Port bit configuration table --> PxODR register = 1
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber); // I make the shift in the macros itself, so I don't make here
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	8812      	ldrh	r2, [r2, #0]
 8000942:	43d2      	mvns	r2, r2
 8000944:	401a      	ands	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	60da      	str	r2, [r3, #12]
			}
		}

	}
	// Write on the CRL or CRH
	(*configRegister) |= ((PIN_config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800094a:	7bfc      	ldrb	r4, [r7, #15]
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fed5 	bl	8000700 <Get_CRLH_Position>
 8000956:	4603      	mov	r3, r0
 8000958:	fa04 f203 	lsl.w	r2, r4, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	431a      	orrs	r2, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	601a      	str	r2, [r3, #0]
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	bd90      	pop	{r4, r7, pc}

0800096e <MCAL_GPIO_ReadPin>:
 * @retval		-The input pin value (two values based on @ref GPIO_PIN_state)
 * Note			-none
 */

uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t PinNumber)
{
 800096e:	b480      	push	{r7}
 8000970:	b085      	sub	sp, #20
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
 8000976:	460b      	mov	r3, r1
 8000978:	807b      	strh	r3, [r7, #2]
	uint8_t BitStatus;
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	689a      	ldr	r2, [r3, #8]
 800097e:	887b      	ldrh	r3, [r7, #2]
 8000980:	4013      	ands	r3, r2
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <MCAL_GPIO_ReadPin+0x1e>
	{
		BitStatus = GPIO_PIN_SET;
 8000986:	2301      	movs	r3, #1
 8000988:	73fb      	strb	r3, [r7, #15]
 800098a:	e001      	b.n	8000990 <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		BitStatus = GPIO_PIN_RESET;
 800098c:	2300      	movs	r3, #0
 800098e:	73fb      	strb	r3, [r7, #15]
	}
	return BitStatus;
 8000990:	7bfb      	ldrb	r3, [r7, #15]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <MCAL_GPIO_WritePin>:
 * @param [in] 	-Value: Specifies the port bit to read according @ref GPIO_PIN_define
 * @retval		-None
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t PinNumber, uint8_t Value)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	807b      	strh	r3, [r7, #2]
 80009a8:	4613      	mov	r3, r2
 80009aa:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_PIN_RESET)
 80009ac:	787b      	ldrb	r3, [r7, #1]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <MCAL_GPIO_WritePin+0x1e>
		 * Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		These bits are write-only and can be accessed in Word mode only.
		0: No action on the corresponding ODRx bit
		1: Set the corresponding ODRx bit
		 */
		GPIOx->BSRR = (uint32_t)PinNumber; //(uint32_t) as I write on 32-bits register
 80009b2:	887a      	ldrh	r2, [r7, #2]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	611a      	str	r2, [r3, #16]
			0: No action on the corresponding ODRx bit
			1: Reset the corresponding ODRx bit
		 */
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 80009b8:	e002      	b.n	80009c0 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 80009ba:	887a      	ldrh	r2, [r7, #2]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	615a      	str	r2, [r3, #20]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr

080009ca <MCAL_GPIO_WritePort>:
 * @param [in] 	-GPIOx: Where x can be (A..E depending on device used) to select the GPIO peripheral
 * @retval		-None
 * Note			-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOx, uint16_t Value)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	460b      	mov	r3, r1
 80009d4:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 80009d6:	887a      	ldrh	r2, [r7, #2]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	60da      	str	r2, [r3, #12]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
	...

080009e8 <clock_init>:
#include "Stm32_F103C6_GPIO_Driver.h"
#include "lcd.h"
#include "keypad.h"
#include "_7segment.h"

void clock_init() {
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
	//Enable clock GPIOA0x19
	RCC_GPIOA_CLK_EN();
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <clock_init+0x24>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <clock_init+0x24>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	6193      	str	r3, [r2, #24]
	//Enable clock GPIOB Bit 3 IOPBEN: IO port B clock enable
	RCC_GPIOB_CLK_EN();
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <clock_init+0x24>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a03      	ldr	r2, [pc, #12]	; (8000a0c <clock_init+0x24>)
 80009fe:	f043 0308 	orr.w	r3, r3, #8
 8000a02:	6193      	str	r3, [r2, #24]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	40021000 	.word	0x40021000

08000a10 <GPIO_init>:
void GPIO_init() {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
//	MCAL_GPIO_Init(GPIOA, &PinCfg);

//PB1 (output PUSH pull Mode)
//01: Output mode, max speed 10 MHz.
//CNF 00: General purpose output push-pull
	PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a1a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a20:	2301      	movs	r3, #1
 8000a22:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	4619      	mov	r1, r3
 8000a28:	4827      	ldr	r0, [pc, #156]	; (8000ac8 <GPIO_init+0xb8>)
 8000a2a:	f7ff ff21 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a32:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a34:	2304      	movs	r3, #4
 8000a36:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4821      	ldr	r0, [pc, #132]	; (8000ac8 <GPIO_init+0xb8>)
 8000a42:	f7ff ff15 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000a46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a4a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a50:	2301      	movs	r3, #1
 8000a52:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	481b      	ldr	r0, [pc, #108]	; (8000ac8 <GPIO_init+0xb8>)
 8000a5a:	f7ff ff09 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a62:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a64:	2304      	movs	r3, #4
 8000a66:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4815      	ldr	r0, [pc, #84]	; (8000ac8 <GPIO_init+0xb8>)
 8000a72:	f7ff fefd 	bl	8000870 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a80:	2301      	movs	r3, #1
 8000a82:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	480f      	ldr	r0, [pc, #60]	; (8000ac8 <GPIO_init+0xb8>)
 8000a8a:	f7ff fef1 	bl	8000870 <MCAL_GPIO_Init>

	//============================

	//PA13 input HighZ Floating input (reset state)
	PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000a8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a92:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a94:	2304      	movs	r3, #4
 8000a96:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <GPIO_init+0xb8>)
 8000aa2:	f7ff fee5 	bl	8000870 <MCAL_GPIO_Init>

	//PB13 (output PUSH pull Mode)
	PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aaa:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000aac:	2304      	movs	r3, #4
 8000aae:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <GPIO_init+0xb8>)
 8000aba:	f7ff fed9 	bl	8000870 <MCAL_GPIO_Init>

}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40010c00 	.word	0x40010c00

08000acc <wait_ms>:
void wait_ms(uint32_t time) {
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	e00b      	b.n	8000af2 <wait_ms+0x26>
		for (j = 0; j < 255; j++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	e002      	b.n	8000ae6 <wait_ms+0x1a>
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	2bfe      	cmp	r3, #254	; 0xfe
 8000aea:	d9f9      	bls.n	8000ae0 <wait_ms+0x14>
	for (i = 0; i < time; i++)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d3ef      	bcc.n	8000ada <wait_ms+0xe>
			;
}
 8000afa:	bf00      	nop
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
	...

08000b08 <main>:
int main(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0

	clock_init();
 8000b0e:	f7ff ff6b 	bl	80009e8 <clock_init>
	LCD_INIT();
 8000b12:	f7ff fd69 	bl	80005e8 <LCD_INIT>
	unsigned char key_pressed;
	LCD_WRITE_STRING("HEY");
 8000b16:	4827      	ldr	r0, [pc, #156]	; (8000bb4 <main+0xac>)
 8000b18:	f7ff fdc4 	bl	80006a4 <LCD_WRITE_STRING>
	wait_ms(30);
 8000b1c:	201e      	movs	r0, #30
 8000b1e:	f7ff ffd5 	bl	8000acc <wait_ms>
	LCD_clear_screen();
 8000b22:	f7ff fd1f 	bl	8000564 <LCD_clear_screen>
	GPIO_init();
 8000b26:	f7ff ff73 	bl	8000a10 <GPIO_init>
	unsigned char LCD_DISPLAY [11] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 8000b2a:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <main+0xb0>)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b30:	c303      	stmia	r3!, {r0, r1}
 8000b32:	801a      	strh	r2, [r3, #0]
 8000b34:	3302      	adds	r3, #2
 8000b36:	0c12      	lsrs	r2, r2, #16
 8000b38:	701a      	strb	r2, [r3, #0]
	for (unsigned char i = 0; i < 11; i++) {
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	73fb      	strb	r3, [r7, #15]
 8000b3e:	e017      	b.n	8000b70 <main+0x68>
		LCD_WRITE_CHAR(LCD_DISPLAY[i]);
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	3310      	adds	r3, #16
 8000b44:	443b      	add	r3, r7
 8000b46:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fd88 	bl	8000660 <LCD_WRITE_CHAR>
		MCAL_GPIO_WritePort(GPIOB, _7SEG_COM_AN[i] << 9); /* write data on to the LED port */
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	4a1a      	ldr	r2, [pc, #104]	; (8000bbc <main+0xb4>)
 8000b54:	5cd3      	ldrb	r3, [r2, r3]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	025b      	lsls	r3, r3, #9
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4818      	ldr	r0, [pc, #96]	; (8000bc0 <main+0xb8>)
 8000b60:	f7ff ff33 	bl	80009ca <MCAL_GPIO_WritePort>
		wait_ms(100);
 8000b64:	2064      	movs	r0, #100	; 0x64
 8000b66:	f7ff ffb1 	bl	8000acc <wait_ms>
	for (unsigned char i = 0; i < 11; i++) {
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	2b0a      	cmp	r3, #10
 8000b74:	d9e4      	bls.n	8000b40 <main+0x38>
		/* wait for 1 second */
	}
//	MCAL_GPIO_WritePort(GPIOB, 0xDE);
//	wait_ms(100);
	LCD_clear_screen();
 8000b76:	f7ff fcf5 	bl	8000564 <LCD_clear_screen>
	Keypad_init();
 8000b7a:	f7ff faf9 	bl	8000170 <Keypad_init>
	LCD_WRITE_STRING("Keypad is ready");
 8000b7e:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <main+0xbc>)
 8000b80:	f7ff fd90 	bl	80006a4 <LCD_WRITE_STRING>
	wait_ms(30);
 8000b84:	201e      	movs	r0, #30
 8000b86:	f7ff ffa1 	bl	8000acc <wait_ms>
	LCD_clear_screen();
 8000b8a:	f7ff fceb 	bl	8000564 <LCD_clear_screen>

	while (1) {

		key_pressed = Keypad_getkey();
 8000b8e:	f7ff fb55 	bl	800023c <Keypad_getkey>
 8000b92:	4603      	mov	r3, r0
 8000b94:	73bb      	strb	r3, [r7, #14]
		switch (key_pressed) {
 8000b96:	7bbb      	ldrb	r3, [r7, #14]
 8000b98:	2b3f      	cmp	r3, #63	; 0x3f
 8000b9a:	d002      	beq.n	8000ba2 <main+0x9a>
 8000b9c:	2b41      	cmp	r3, #65	; 0x41
 8000b9e:	d103      	bne.n	8000ba8 <main+0xa0>
		case 'A':
			break;
 8000ba0:	e007      	b.n	8000bb2 <main+0xaa>
		case '?':
			LCD_clear_screen();
 8000ba2:	f7ff fcdf 	bl	8000564 <LCD_clear_screen>
			break;
 8000ba6:	e004      	b.n	8000bb2 <main+0xaa>
		default:
			LCD_WRITE_CHAR(key_pressed);
 8000ba8:	7bbb      	ldrb	r3, [r7, #14]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fd58 	bl	8000660 <LCD_WRITE_CHAR>
			break;
 8000bb0:	bf00      	nop
		key_pressed = Keypad_getkey();
 8000bb2:	e7ec      	b.n	8000b8e <main+0x86>
 8000bb4:	08000c7c 	.word	0x08000c7c
 8000bb8:	08000c90 	.word	0x08000c90
 8000bbc:	20000020 	.word	0x20000020
 8000bc0:	40010c00 	.word	0x40010c00
 8000bc4:	08000c80 	.word	0x08000c80

08000bc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bcc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	; (8000c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <LoopForever+0xe>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	; (8000c14 <LoopForever+0x16>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bf6:	f000 f811 	bl	8000c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bfa:	f7ff ff85 	bl	8000b08 <main>

08000bfe <LoopForever>:

LoopForever:
  b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   r0, =_estack
 8000c00:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000c0c:	08000ca4 	.word	0x08000ca4
  ldr r2, =_sbss
 8000c10:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000c14:	2000004c 	.word	0x2000004c

08000c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_2_IRQHandler>
	...

08000c1c <__libc_init_array>:
 8000c1c:	b570      	push	{r4, r5, r6, lr}
 8000c1e:	2600      	movs	r6, #0
 8000c20:	4d0c      	ldr	r5, [pc, #48]	; (8000c54 <__libc_init_array+0x38>)
 8000c22:	4c0d      	ldr	r4, [pc, #52]	; (8000c58 <__libc_init_array+0x3c>)
 8000c24:	1b64      	subs	r4, r4, r5
 8000c26:	10a4      	asrs	r4, r4, #2
 8000c28:	42a6      	cmp	r6, r4
 8000c2a:	d109      	bne.n	8000c40 <__libc_init_array+0x24>
 8000c2c:	f000 f81a 	bl	8000c64 <_init>
 8000c30:	2600      	movs	r6, #0
 8000c32:	4d0a      	ldr	r5, [pc, #40]	; (8000c5c <__libc_init_array+0x40>)
 8000c34:	4c0a      	ldr	r4, [pc, #40]	; (8000c60 <__libc_init_array+0x44>)
 8000c36:	1b64      	subs	r4, r4, r5
 8000c38:	10a4      	asrs	r4, r4, #2
 8000c3a:	42a6      	cmp	r6, r4
 8000c3c:	d105      	bne.n	8000c4a <__libc_init_array+0x2e>
 8000c3e:	bd70      	pop	{r4, r5, r6, pc}
 8000c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c44:	4798      	blx	r3
 8000c46:	3601      	adds	r6, #1
 8000c48:	e7ee      	b.n	8000c28 <__libc_init_array+0xc>
 8000c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c4e:	4798      	blx	r3
 8000c50:	3601      	adds	r6, #1
 8000c52:	e7f2      	b.n	8000c3a <__libc_init_array+0x1e>
 8000c54:	08000c9c 	.word	0x08000c9c
 8000c58:	08000c9c 	.word	0x08000c9c
 8000c5c:	08000c9c 	.word	0x08000c9c
 8000c60:	08000ca0 	.word	0x08000ca0

08000c64 <_init>:
 8000c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c66:	bf00      	nop
 8000c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c6a:	bc08      	pop	{r3}
 8000c6c:	469e      	mov	lr, r3
 8000c6e:	4770      	bx	lr

08000c70 <_fini>:
 8000c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c72:	bf00      	nop
 8000c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c76:	bc08      	pop	{r3}
 8000c78:	469e      	mov	lr, r3
 8000c7a:	4770      	bx	lr
