/*
 * Stm32_F103C6_GPIO_Driver.c
 *
 *  Created on: Feb 22, 2023
 *      Author: Ali Mohamed Taima
 */

#include "Stm32_F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
	switch(PinNumber)
	{
	case GPIO_PIN_0:
		return 0;
		break;
	case GPIO_PIN_1:
		return 4;
		break;
	case GPIO_PIN_2:
		return 8;
		break;
	case GPIO_PIN_3:
		return 12;
		break;
	case GPIO_PIN_4:
		return 16;
		break;
	case GPIO_PIN_5:
		return 20;
		break;
	case GPIO_PIN_6:
		return 24;
		break;
	case GPIO_PIN_7:
		return 28;
		break;
	case GPIO_PIN_8:
		return 0;
		break;
	case GPIO_PIN_9:
		return 4;
		break;
	case GPIO_PIN_10:
		return 8;
		break;
	case GPIO_PIN_11:
		return 12;
		break;
	case GPIO_PIN_12:
		return 16;
		break;
	case GPIO_PIN_13:
		return 20;
		break;
	case GPIO_PIN_14:
		return 24;
		break;
	case GPIO_PIN_15:
		return 28;
		break;
	default:
		return 0;
	}

}
/**================================================================
 * @Fn			- MCAL_GPIO_Init
 * @brief 		- Initializes the GPIOx PINy according to the specified parameters in the PinConfig
 * @param [in] 	-GPIOx: Where x can be (A..E depending on device used) to select the GPIO peripheral
 * @param [in] 	-PinConfig pointer to a GPIO_PinConfig_t structure that contains
 * 				 the configuration information for the specified GPIO PIN.
 * @retval		-none
 * Note			-Stem32f103C6 MCU has GPIO A, B, C, D, E Modules
 * 				 But LQFP48 Package has only GPIO A, B, PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_PinConfig_t* PinConfig)
{
	// Port configuration register low (GPIOx_CRL) --> Configures PINS from 0 >> 7
	// Port configuration register High (GPIOx_CRH) --> Configures PINS from 8 >> 15
	volatile uint32_t* configRegister = NULL;
	uint8_t PIN_config = 0;
	configRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH;
	//Clear CNF[1:0] MODE8[1:0]
	(*configRegister) &= ~(0xf<<Get_CRLH_Position(PinConfig->GPIO_PinNumber));
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
	{
		//Set CNF[1:0] MODE8[1:0]
		PIN_config = ((((PinConfig->GPIO_MODE - 4)<<2) | (PinConfig->GPIO_Output_Speed)) & 0x0f);
		(*configRegister) |= ((PIN_config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
	}
	// if pin is input
	else // MODE = 00: input mode(reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
		{
			//Set CNF[1:0] MODE8[1:0]
			PIN_config = ((((PinConfig->GPIO_MODE)<<2) | 0x0) & 0x0f);
			(*configRegister) |= ((PIN_config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_)

	}
}
/**================================================================
 * @Fn			- MCAL_GPIO_DeInit
 * @brief 		- Reset all the GPIO Registers
 * @param [in] 	-GPIOx: Where x can be (A..E depending on device used) to select the GPIO peripheral
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_DeInit(GPIO_TypeDef* GPIOx)
{

}

/**================================================================
 * @Fn			- MCAL_GPIO_ReadPin
 * @brief 		- Read Specific PIN
 * @param [in] 	-GPIOx: Where x can be (A..E depending on device used) to select the GPIO peripheral
 * @param [in] 	-PinNumber: Set Pin Number according @ref GPIO_PIN_define
 * @retval		-The input pin value (two values based on @ref GPIO_PIN_state)
 * Note			-none
 */

uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t PinNumber)
{

}

/**================================================================
 * @Fn			- MCAL_GPIO_ReadPort
 * @brief 		- Read the whole port
 * @param [in] 	-GPIOx: Where x can be (A..E depending on device used) to select the GPIO peripheral
 * @param [in] 	-PinNumber: Set Pin Number according @ref GPIO_PIN_define
 * @retval		-The input port value
 * Note			-none
 */
uint16_t MCAL_GPIO_ReadPort(GPIO_TypeDef* GPIOx)
{

}
/**================================================================
 * @Fn			- MCAL_GPIO_WritePin
 * @brief 		- Write  Specific PIN
 * @param [in] 	-GPIOx: Where x can be (A..E depending on device used) to select the GPIO peripheral
 * @param [in] 	-PinNumber: Specifies Pin Number according @ref GPIO_PIN_define
 * @param [in] 	-Value: Specifies the port bit to read according @ref GPIO_PIN_define
 * @retval		-None
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t PinNumber, uint8_t Value);
/**================================================================
 * @Fn			- MCAL_GPIO_WritePort
 * @brief 		- Write  the whole output port
 * @param [in] 	-GPIOx: Where x can be (A..E depending on device used) to select the GPIO peripheral
 * @retval		-None
 * Note			-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOx, uint16_t Value)
{

}
/**================================================================
 * @Fn			- MCAL_GPIO_TogglePin
 * @brief 		- Toggle specific GPIO pin
 * @param [in] 	-GPIOx: Where x can be (A..E depending on device used) to select the GPIO peripheral
 * @param [in] 	-Value: Specifies the port bit to read according @ref GPIO_PIN_define
 * @retval		-None
 * Note			-none
 */
void MCAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t PinNumber)
{

}
/**================================================================
 * @Fn			- MCAL_GPIO_LockPin
 * @brief 		- The locking mechanism allows the IO configuration to be forzen
 * @param [in] 	-GPIOx: Where x can be (A..E depending on device used) to select the GPIO peripheral
 * @param [in] 	-Value: Specifies the port bit to read according @ref GPIO_PIN_define
 * @retval		-OK if pin config is locked OR ERROR if pin not locked (OK & ERROR are defined @ref GPIO_RETURN_LOCK
 * Note			-none
 */
uint8_t MCAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t PinNumber)
{

}
