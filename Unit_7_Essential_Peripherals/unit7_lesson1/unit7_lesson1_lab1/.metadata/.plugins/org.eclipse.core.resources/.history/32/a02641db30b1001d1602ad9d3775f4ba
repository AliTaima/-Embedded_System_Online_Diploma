/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */


#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include <stdint.h>
#include <stdlib.h>

//register address
//RCC
#define RCC_BASE        0x40021000
#define RCC_APB2ENR     *(volatile uint32_t *)(RCC_BASE   + 0x18)

// GPIOA
#define GPIOA_BASE      0x40010800
#define GPIOA_CRH       *(volatile uint32_t *)(GPIOA_BASE + 0x04)
#define GPIOA_CRL       *(volatile uint32_t *)(GPIOA_BASE + 0x00)
#define GPIOA_ODR       *(volatile uint32_t *)(GPIOA_BASE + 0x0C)
#define GPIOA_IDR       *(volatile uint32_t *)(GPIOA_BASE + 0x08)

#define GPIOA13         (1UL<<13)
// GPIOB
#define GPIOB_BASE      0x40010C00
#define GPIOB_CRH       *(volatile uint32_t *)(GPIOB_BASE + 0x04)
#define GPIOB_CRL       *(volatile uint32_t *)(GPIOB_BASE + 0x00)
#define GPIOB_IDR       *(volatile uint32_t *)(GPIOB_BASE + 0x08)
#define GPIOB_ODR       *(volatile uint32_t *)(GPIOA_BASE + 0x0C)

void clock_init()
{
	// Enable clock GPIOA
	RCC_APB2ENR |= (1<<2);
	// Enable clock GPIOB
	RCC_APB2ENR |= (1<<3);
}

void GPIO_init()
{
	GPIOA_CRL = 0;
	GPIOA_CRH = 0;
	GPIOB_ODR = 0;
	// Input pins
	// PA1 high Z
	GPIOA_CRL |= (0b01<<6);	//01: Floating input (reset state)
	GPIOA_CRL &= ~(0b11<<4);	//00: Input mode (reset state)
	// PA13 high Z
	GPIOA_CRH |= (0b01<<22);	//01: Floating input (reset state)
	GPIOA_CRH |= (0b00<<20);	//00: Input mode (reset state)
	//Output pins
	// PB1 push pull
	GPIOB_CRL &= ~(0b11<<6);	//00: General purpose output push-pull
	GPIOB_CRL |= (0b01<<4);	//01: Output mode, max speed 10 MHz
	// PB13 push pull
	GPIOB_CRH &= ~(0b11<<22);	//00: General purpose output push-pull
	GPIOB_CRH |= (0b01<<20);	//01: Output mode, max speed 10 MHz

}
void my_wait(int x)
{
	unsigned int i, j;
	for(i = 0; i<x; i++)
	{
		for(j = 0; j<255; j++);
	}
}
int main(void)
{
	clock_init();
	GPIO_init();

	while(1)
	{
		// PA1 connected to PUR
		// first I mask with bit1 then shift it right to compare with decimal
		if(((GPIOA_IDR &(1<<1))>>1) == 0) //press
		{
			GPIOB_ODR ^= 1<<1;
			while(((GPIOA_IDR &(1<<1))>>1) == 0);//single press

		}
		if(((GPIOA_IDR &(1<<13)) >> 13) == 1) //Multi press
		{
			GPIOB_ODR ^= 1<<13;
		}
		my_wait(1);
	}




}
