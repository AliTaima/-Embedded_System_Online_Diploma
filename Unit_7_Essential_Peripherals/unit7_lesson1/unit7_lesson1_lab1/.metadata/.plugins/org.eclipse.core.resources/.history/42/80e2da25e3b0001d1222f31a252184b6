/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */


#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include <stdint.h>
#include <stdlib.h>

//register address
//RCC
#define RCC_BASE        0x40021000
#define RCC_APB2ENR     *(volatile uint32_t *)(RCC_BASE   + 0x18)
#define RCC_IOPAEN      (1<<2)
// GPIO
#define GPIOA_BASE      0x40010800
#define GPIOA_CRH       *(volatile uint32_t *)(GPIOA_BASE + 0x04)
#define GPIOA_CRL       *(volatile uint32_t *)(GPIOA_BASE + 0x00)
#define GPIOA_ODR       *(volatile uint32_t *)(GPIOA_BASE + 0x0C)
//bit fields
#define GPIOA13         (1UL<<13)

//EXTI
#define EXTI_BASE      0x40010400
// for masking or un-masking EXTI
#define EXTI_IMR       *(volatile uint32_t *)(EXTI_BASE + 0x00)
// for controlling Rising edge
#define EXTI_RTSR      *(volatile uint32_t *)(EXTI_BASE + 0x08)
// to disable pending after recving achknowlege
#define EXTI_PR       *(volatile uint32_t *)(EXTI_BASE + 0x14)

//--------------------
// for selecting pin to EXTI
#define AFIO_BASE      0x40010000
#define AFIO_EXTICR1       *(volatile uint32_t *)(AFIO_BASE + 0x14)

// for NVIC
#define NVIC_BASE      0xE000E100
#define NVIC_EXTIE0  *(volatile uint32_t *)(NVIC_BASE + 0x00)
void clock_init()
{
	// Enable clock GPIOA
	RCC_APB2ENR |= RCC_IOPAEN;
	//---------------------------------------------
	//	Bit 2 IOPAEN: I/O port A clock enable
	//	Set and cleared by software.
	//	0: I/O port A clock disabled
	//	1:I/O port A clock enabled
	//--> Enable PortA.0 clock
	RCC_APB2ENR |= (1<<2);
	//---------------------------------------------------
	//	Bit 0 AFIOEN: Alternate function I/O clock enable
	//	Set and cleared by software.
	//	0: Alternate Function I/O clock disabled
	//	1:Alternate Function I/O clock enabled
	RCC_APB2ENR |= (1<<0);
}

void GPIOI_init()
{
	//EXTI x configuration (x= 0 to PORTA.0)
	AFIO_EXTICR1 = 0;
	//pin13 in port A to output
	GPIOA_CRH &= 0xFF0FFFFF;
	GPIOA_CRH |= 0x00200000;
	// PINA.0 should be input floating(reset state)
	GPIOA_CRL |= (1<<2);
}
int main(void)
{
	clock_init();
	GPIOI_init();
	//	Bits 19:0 MRx: Interrupt Mask on line x
	//	0: Interrupt request from Line x is masked
	//	1: Interrupt request from Line x is not masked
	// Enalbe EXTI Line0 (Mask1)
	EXTI_IMR |= (1<<0);
	//	Bits 19:0 TRx: Rising trigger event configuration bit of line x
	//	0: Rising trigger disabled (for Event and Interrupt) for input line
	//	1: Rising trigger enabled (for Event and Interrupt) for input line
	// --> enbale rising EXTI line0
	EXTI_RTSR |= (1<<0);
	//----------------------------------------
	//Enable NVIC IRQ6 <<>> EXTI0
	//! The details of NVIC will be found on the specs of ARM CORTEX M3 itself
	NVIC_EXTIE0 |= (1<<6);
	while(1);




}
void EXTI0_IRQHandler(void)
{
	// IRQ is Happened --> PORTA pin0 _|- rising edge
	// Toggle led (PINA.13)
	GPIOA_ODR ^= (1<<13);

	// clear pending request for line 0
	EXTI_PR |= (1<<0);
}
