
atmega32_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a59  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000760  00000000  00000000  00000dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005dd  00000000  00000000  00001531  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00001b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000488  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024d  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002339  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  64:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_Kick>:
}

void LCD_Kick(void)
{
	/*Enable pulse*/
	LCD_Control_Port |= (1<<EN);// Enable High
  6c:	8b b3       	in	r24, 0x1b	; 27
  6e:	84 60       	ori	r24, 0x04	; 4
  70:	8b bb       	out	0x1b, r24	; 27
		delay_ms(1);	//minimum delay of 450ns
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	0e 94 b9 00 	call	0x172	; 0x172 <delay_ms>
	LCD_Control_Port &= ~(1<<EN);//Enable Low
  7a:	8b b3       	in	r24, 0x1b	; 27
  7c:	8b 7f       	andi	r24, 0xFB	; 251
  7e:	8b bb       	out	0x1b, r24	; 27
  80:	08 95       	ret

00000082 <LCD_Send_A_Command>:
	LCD_Send_A_Command(LCD_ENTRY_INC);	//Auto increment
	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
}
void LCD_Send_A_Command(unsigned char command)
{
  82:	cf 93       	push	r28
  84:	c8 2f       	mov	r28, r24
	LCD_Kick();
	delay_ms(3);
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_Data_Port = (LCD_Control_Port & 0x0F) | (command & 0xF0);//Sending upper niblle
  86:	8b b3       	in	r24, 0x1b	; 27
  88:	8f 70       	andi	r24, 0x0F	; 15
  8a:	9c 2f       	mov	r25, r28
  8c:	90 7f       	andi	r25, 0xF0	; 240
  8e:	89 2b       	or	r24, r25
  90:	85 bb       	out	0x15, r24	; 21
	LCD_Control_Port &= ~(1<<RS | 1<<RW);//command register
  92:	8b b3       	in	r24, 0x1b	; 27
  94:	8c 7f       	andi	r24, 0xFC	; 252
  96:	8b bb       	out	0x1b, r24	; 27
	LCD_Kick();
  98:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_Kick>
	delay_ms(1);
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 b9 00 	call	0x172	; 0x172 <delay_ms>
	LCD_Data_Port = (LCD_Control_Port & 0x0F) | (command << 4 );//Sending upper niblle
  a4:	2b b3       	in	r18, 0x1b	; 27
  a6:	30 e1       	ldi	r19, 0x10	; 16
  a8:	c3 9f       	mul	r28, r19
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
  ae:	92 2f       	mov	r25, r18
  b0:	9f 70       	andi	r25, 0x0F	; 15
  b2:	89 2b       	or	r24, r25
  b4:	85 bb       	out	0x15, r24	; 21
	LCD_Kick();
  b6:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_Kick>
	delay_ms(2);
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 b9 00 	call	0x172	; 0x172 <delay_ms>
	#endif
}
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <LCD_Init>:
 *  Author: Ali Mohamed Taima
 */ 
#include "lcd.h"
void LCD_Init(void)
{
	LCD_Control_Dir |= (1<<RS|1<<EN|1<<RW);//make control pins as output
  c6:	8a b3       	in	r24, 0x1a	; 26
  c8:	87 60       	ori	r24, 0x07	; 7
  ca:	8a bb       	out	0x1a, r24	; 26
	LCD_Control_Port &= (1<<RS|1<<EN|1<<RW); //make sure that output is 0
  cc:	8b b3       	in	r24, 0x1b	; 27
  ce:	87 70       	andi	r24, 0x07	; 7
  d0:	8b bb       	out	0x1b, r24	; 27
	//make data port as output
	LCD_Data_Dir = 0xFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	84 bb       	out	0x14, r24	; 20
	delay_ms(20);
  d6:	84 e1       	ldi	r24, 0x14	; 20
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 b9 00 	call	0x172	; 0x172 <delay_ms>
	#ifdef EIGHT_BIT_MODE
	LCD_Send_A_Command(LCD_FUNCTION_8BIT_2LINES);
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_Send_A_Command(0x02); //Send for 4bit initialization of LCD
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_FUNCTION_4BIT_2LINES);
  e4:	88 e2       	ldi	r24, 0x28	; 40
  e6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_A_Command>
	#endif
	
	LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);
  ea:	8f e0       	ldi	r24, 0x0F	; 15
  ec:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_ENTRY_INC);	//Auto increment
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
  fc:	80 e8       	ldi	r24, 0x80	; 128
  fe:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Send_A_Command>
 102:	08 95       	ret

00000104 <LCD_Send_A_Character>:
	LCD_Kick();
	delay_ms(2);
	#endif
}
void LCD_Send_A_Character(unsigned char char_data)
{
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
	LCD_Kick();
	delay_ms(1);
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_Data_Port = (LCD_Control_Port & 0x0F) | (char_data & 0xF0);//Sending upper niblle
 108:	8b b3       	in	r24, 0x1b	; 27
 10a:	8f 70       	andi	r24, 0x0F	; 15
 10c:	9c 2f       	mov	r25, r28
 10e:	90 7f       	andi	r25, 0xF0	; 240
 110:	89 2b       	or	r24, r25
 112:	85 bb       	out	0x15, r24	; 21
	LCD_Control_Port |= (1<<RS); //Data register
 114:	8b b3       	in	r24, 0x1b	; 27
 116:	81 60       	ori	r24, 0x01	; 1
 118:	8b bb       	out	0x1b, r24	; 27
	LCD_Control_Port &= ~(1<<RW);//write operation
 11a:	8b b3       	in	r24, 0x1b	; 27
 11c:	8d 7f       	andi	r24, 0xFD	; 253
 11e:	8b bb       	out	0x1b, r24	; 27
	LCD_Kick();
 120:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_Kick>
	delay_ms(1);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 b9 00 	call	0x172	; 0x172 <delay_ms>
	LCD_Data_Port = (LCD_Control_Port & 0x0F) | (char_data << 4 );//Sending upper niblle
 12c:	2b b3       	in	r18, 0x1b	; 27
 12e:	30 e1       	ldi	r19, 0x10	; 16
 130:	c3 9f       	mul	r28, r19
 132:	c0 01       	movw	r24, r0
 134:	11 24       	eor	r1, r1
 136:	92 2f       	mov	r25, r18
 138:	9f 70       	andi	r25, 0x0F	; 15
 13a:	89 2b       	or	r24, r25
 13c:	85 bb       	out	0x15, r24	; 21
	LCD_Kick();
 13e:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_Kick>
	delay_ms(2);
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 b9 00 	call	0x172	; 0x172 <delay_ms>
	#endif
	
	
}
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <main>:
#include "Application/application.h"


int main(void)
{
	LCD_Init();
 14e:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Init>
	//LCD_Send_A_String("ALI");
	UART_Init();
 152:	0e 94 ca 00 	call	0x194	; 0x194 <UART_Init>
	UART_Send('A');
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <UART_Send>
	UART_Send('B');
 15c:	82 e4       	ldi	r24, 0x42	; 66
 15e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <UART_Send>
	UART_Send('C');
 162:	83 e4       	ldi	r24, 0x43	; 67
 164:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <UART_Send>
	/* Replace with your application code */
	while (1)
	{
		LCD_Send_A_Character(UART_Receive());
 168:	0e 94 ed 00 	call	0x1da	; 0x1da <UART_Receive>
 16c:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Send_A_Character>
 170:	fb cf       	rjmp	.-10     	; 0x168 <main+0x1a>

00000172 <delay_ms>:
}
void delay_ms(uint32_t t)
{
	uint32_t i, j;

	for(i = 0;i<t;i++)
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	0a c0       	rjmp	.+20     	; 0x18c <delay_ms+0x1a>
		for(j = 0; j<255; j++);
 178:	2f 5f       	subi	r18, 0xFF	; 255
 17a:	3f 4f       	sbci	r19, 0xFF	; 255
 17c:	02 c0       	rjmp	.+4      	; 0x182 <delay_ms+0x10>
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	2f 3f       	cpi	r18, 0xFF	; 255
 184:	31 05       	cpc	r19, r1
 186:	c0 f3       	brcs	.-16     	; 0x178 <delay_ms+0x6>
}
void delay_ms(uint32_t t)
{
	uint32_t i, j;

	for(i = 0;i<t;i++)
 188:	4f 5f       	subi	r20, 0xFF	; 255
 18a:	5f 4f       	sbci	r21, 0xFF	; 255
 18c:	48 17       	cp	r20, r24
 18e:	59 07       	cpc	r21, r25
 190:	b0 f3       	brcs	.-20     	; 0x17e <delay_ms+0xc>
		for(j = 0; j<255; j++);
}
 192:	08 95       	ret

00000194 <UART_Init>:

void UART_Init(void)
{
	//baud rate = 9600, clock = 8MHZ
	uint16_t baud_rate = 51;
	UBRRH = (uint8_t)(51>>8);
 194:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint8_t)baud_rate;
 196:	83 e3       	ldi	r24, 0x33	; 51
 198:	89 b9       	out	0x09, r24	; 9
	
	//Set frame format: Asynch, no-parity, 1-bit stop, 8-bit data
	SET_PIN(UCSRC, 7); //To enable writing to UCSRC reg.
 19a:	80 b5       	in	r24, 0x20	; 32
 19c:	80 68       	ori	r24, 0x80	; 128
 19e:	80 bd       	out	0x20, r24	; 32
	CLR_PIN(UCSRC, 6);//Asynch
 1a0:	80 b5       	in	r24, 0x20	; 32
 1a2:	8f 7b       	andi	r24, 0xBF	; 191
 1a4:	80 bd       	out	0x20, r24	; 32
	CLR_PIN(UCSRC, 5);//no parity
 1a6:	80 b5       	in	r24, 0x20	; 32
 1a8:	8f 7d       	andi	r24, 0xDF	; 223
 1aa:	80 bd       	out	0x20, r24	; 32
	CLR_PIN(UCSRC, 4);//no parity
 1ac:	80 b5       	in	r24, 0x20	; 32
 1ae:	8f 7e       	andi	r24, 0xEF	; 239
 1b0:	80 bd       	out	0x20, r24	; 32
	CLR_PIN(UCSRC, 3);//1-bit stop
 1b2:	80 b5       	in	r24, 0x20	; 32
 1b4:	87 7f       	andi	r24, 0xF7	; 247
 1b6:	80 bd       	out	0x20, r24	; 32
	//8-bit data
	SET_PIN(UCSRC, 1);//UCSZ0
 1b8:	80 b5       	in	r24, 0x20	; 32
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	80 bd       	out	0x20, r24	; 32
	SET_PIN(UCSRC, 2);//UCSZ1
 1be:	80 b5       	in	r24, 0x20	; 32
 1c0:	84 60       	ori	r24, 0x04	; 4
 1c2:	80 bd       	out	0x20, r24	; 32
	SET_PIN(UCSRB, 2);//UCSZ2
 1c4:	8a b1       	in	r24, 0x0a	; 10
 1c6:	84 60       	ori	r24, 0x04	; 4
 1c8:	8a b9       	out	0x0a, r24	; 10

	//UART Enable 
	UCSRB |= ((1<<4) | (1<<3));//Enable RX-->4, TX-->3
 1ca:	8a b1       	in	r24, 0x0a	; 10
 1cc:	88 61       	ori	r24, 0x18	; 24
 1ce:	8a b9       	out	0x0a, r24	; 10
 1d0:	08 95       	ret

000001d2 <UART_Send>:
	
}
void UART_Send(char data)
{
	while (!(UCSRA & (1<<5)));
 1d2:	5d 9b       	sbis	0x0b, 5	; 11
 1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <UART_Send>
	UDR = data;
 1d6:	8c b9       	out	0x0c, r24	; 12
 1d8:	08 95       	ret

000001da <UART_Receive>:
	
}
char UART_Receive(void)
{
	while (!(UCSRA & (1<<7)));
 1da:	5f 9b       	sbis	0x0b, 7	; 11
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <UART_Receive>
	return UDR;
 1de:	8c b1       	in	r24, 0x0c	; 12
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
