
atmega32_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000660  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ba  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029f  00000000  00000000  00000dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000349  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002d  00000000  00000000  0000145d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000148a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "Application/application.h"


int main(void)
{
	SPI_Master_Init();
  6c:	0e 94 3c 00 	call	0x78	; 0x78 <SPI_Master_Init>
	SPI_Master_Send('A');
  70:	81 e4       	ldi	r24, 0x41	; 65
  72:	0e 94 4c 00 	call	0x98	; 0x98 <SPI_Master_Send>
  76:	ff cf       	rjmp	.-2      	; 0x76 <main+0xa>

00000078 <SPI_Master_Init>:


void SPI_Master_Init(void)
{
	//set MOSI, CLK, SS as outputs 
	SPI_Dir |= (1<<MOSI) | (1<<CLK) | (1<<SS);
  78:	87 b3       	in	r24, 0x17	; 23
  7a:	80 6b       	ori	r24, 0xB0	; 176
  7c:	87 bb       	out	0x17, r24	; 23
	//Set MISO as input
	SPI_Dir &= ~(1<<MISO);
  7e:	87 b3       	in	r24, 0x17	; 23
  80:	8f 7b       	andi	r24, 0xBF	; 191
  82:	87 bb       	out	0x17, r24	; 23
	//write high on SS
	SPI_Port |= (1<<SS);
  84:	88 b3       	in	r24, 0x18	; 24
  86:	80 61       	ori	r24, 0x10	; 16
  88:	88 bb       	out	0x18, r24	; 24
	//Enable SPI, Select Master mode, Divide fosc/16
	SPCR |= (1<<SPE) | (1<<MSTR) | (1<<SPR0);
  8a:	8d b1       	in	r24, 0x0d	; 13
  8c:	81 65       	ori	r24, 0x51	; 81
  8e:	8d b9       	out	0x0d, r24	; 13
	//make sure the reset values to make fosc/16
	//SPI2X | SPR1| SPR0 | SCK Frequency
	//0		|  0  |	1	 | fosc/16
	SPSR &= ~(1<<SPI2X);
  90:	8e b1       	in	r24, 0x0e	; 14
  92:	8e 7f       	andi	r24, 0xFE	; 254
  94:	8e b9       	out	0x0e, r24	; 14
  96:	08 95       	ret

00000098 <SPI_Master_Send>:

void SPI_Master_Send(uint8_t data)
{
	uint8_t flush_buf;
	//write low on SS to enable sending
	SPI_Port &= ~(1<<SS);
  98:	98 b3       	in	r25, 0x18	; 24
  9a:	9f 7e       	andi	r25, 0xEF	; 239
  9c:	98 bb       	out	0x18, r25	; 24
	//write data to SPDR register
	SPDR = data;
  9e:	8f b9       	out	0x0f, r24	; 15
	while(!READ_PIN(SPSR, SPIF));
  a0:	8e b1       	in	r24, 0x0e	; 14
	//the SPIF bit is cleared by first reading the SPI Status Register with SPIF
	//set, then accessing the SPI Data Register (SPDR)
	flush_buf = SPDR;
  a2:	8f b1       	in	r24, 0x0f	; 15
	//write high on SS
	SPI_Port |= (1<<SS);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	80 61       	ori	r24, 0x10	; 16
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
