
atmega32_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e9  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065c  00000000  00000000  00000bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043c  00000000  00000000  00001255  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00001694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047e  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f7  00000000  00000000  00001bba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001cb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "Application/application.h"
#define F_CPU		1000000U

//
int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	1f 92       	push	r1
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	TWI_Init();
  86:	0e 94 6e 00 	call	0xdc	; 0xdc <TWI_Init>
	uint8_t data;
	//Master Receive
	if(TWI_Start() == EVENT_OK)
  8a:	0e 94 72 00 	call	0xe4	; 0xe4 <TWI_Start>
  8e:	81 11       	cpse	r24, r1
  90:	10 c0       	rjmp	.+32     	; 0xb2 <main+0x36>
	{
		if(TWI_Address_Select(0x10, READ) == SLA_R_ACK_SENT)
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	80 e1       	ldi	r24, 0x10	; 16
  96:	0e 94 81 00 	call	0x102	; 0x102 <TWI_Address_Select>
  9a:	85 30       	cpi	r24, 0x05	; 5
  9c:	51 f4       	brne	.+20     	; 0xb2 <main+0x36>
		{
			if(TWI_Data_Event(&data, READ, NOT_ACK) == DATA_READ_NACK_SENT)
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	ce 01       	movw	r24, r28
  a4:	01 96       	adiw	r24, 0x01	; 1
  a6:	0e 94 a4 00 	call	0x148	; 0x148 <TWI_Data_Event>
  aa:	8c 30       	cpi	r24, 0x0C	; 12
  ac:	11 f4       	brne	.+4      	; 0xb2 <main+0x36>
			{
				TWI_Stop();
  ae:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <TWI_Stop>
			}
		}
	}
	//Master Transmit
	if(TWI_Start() == EVENT_OK)
  b2:	0e 94 72 00 	call	0xe4	; 0xe4 <TWI_Start>
  b6:	81 11       	cpse	r24, r1
  b8:	10 c0       	rjmp	.+32     	; 0xda <main+0x5e>
	{
		if(TWI_Address_Select(0x10, WRITE) == SLA_W_ACK_SENT)
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	0e 94 81 00 	call	0x102	; 0x102 <TWI_Address_Select>
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	51 f4       	brne	.+20     	; 0xda <main+0x5e>
		{
			if(TWI_Data_Event(&data, WRITE, ACK) == DATA_WRITE_NACK_SENT)
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	ce 01       	movw	r24, r28
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	0e 94 a4 00 	call	0x148	; 0x148 <TWI_Data_Event>
  d2:	89 30       	cpi	r24, 0x09	; 9
  d4:	11 f4       	brne	.+4      	; 0xda <main+0x5e>
			{
				TWI_Stop();
  d6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <TWI_Stop>
  da:	ff cf       	rjmp	.-2      	; 0xda <main+0x5e>

000000dc <TWI_Init>:
	else
	{
		return EVENT_OK;
	}
	
}
  dc:	11 b8       	out	0x01, r1	; 1
  de:	89 ef       	ldi	r24, 0xF9	; 249
  e0:	80 b9       	out	0x00, r24	; 0
  e2:	08 95       	ret

000000e4 <TWI_Start>:
  e4:	84 ea       	ldi	r24, 0xA4	; 164
  e6:	86 bf       	out	0x36, r24	; 54
  e8:	06 b6       	in	r0, 0x36	; 54
  ea:	07 fe       	sbrs	r0, 7
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <TWI_Start+0x4>
  ee:	81 b1       	in	r24, 0x01	; 1
  f0:	88 7f       	andi	r24, 0xF8	; 248
  f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  f6:	88 30       	cpi	r24, 0x08	; 8
  f8:	11 f0       	breq	.+4      	; 0xfe <TWI_Start+0x1a>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	08 95       	ret
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	08 95       	ret

00000102 <TWI_Address_Select>:
EN_state_t TWI_Address_Select(uint8_t address, EN_RW_t rw)
{
	if (rw == READ)
 102:	61 11       	cpse	r22, r1
 104:	03 c0       	rjmp	.+6      	; 0x10c <TWI_Address_Select+0xa>
	{
		TWDR = address + 1;
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	83 b9       	out	0x03, r24	; 3
 10a:	03 c0       	rjmp	.+6      	; 0x112 <TWI_Address_Select+0x10>
	}
	else if (rw == WRITE)
 10c:	61 30       	cpi	r22, 0x01	; 1
 10e:	09 f4       	brne	.+2      	; 0x112 <TWI_Address_Select+0x10>
	{
		TWDR = address + 0;
 110:	83 b9       	out	0x03, r24	; 3
	}
	TWCR = (1<<TWINT) | (1<<TWEN) ; //I should write on TWDR before clear flag 
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 116:	06 b6       	in	r0, 0x36	; 54
 118:	07 fe       	sbrs	r0, 7
 11a:	fd cf       	rjmp	.-6      	; 0x116 <TWI_Address_Select+0x14>
	status = TWSR & 0xF8;
 11c:	81 b1       	in	r24, 0x01	; 1
 11e:	88 7f       	andi	r24, 0xF8	; 248
 120:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(status == SLA_W_ACK_STATE)
 124:	88 31       	cpi	r24, 0x18	; 24
 126:	41 f0       	breq	.+16     	; 0x138 <TWI_Address_Select+0x36>
	{
		return SLA_W_ACK_SENT;
	}
	else if(status == SLA_W_NOT_ACK_STATE)
 128:	80 32       	cpi	r24, 0x20	; 32
 12a:	41 f0       	breq	.+16     	; 0x13c <TWI_Address_Select+0x3a>
	{
		return SLA_W_NOT_ACK_SENT;
	}
	else if(status == SLA_R_ACK_STATE)
 12c:	80 34       	cpi	r24, 0x40	; 64
 12e:	41 f0       	breq	.+16     	; 0x140 <TWI_Address_Select+0x3e>
	{
		return SLA_R_ACK_SENT;
	}
	else if(status == SLA_R_NOT_ACK_STATE)
 130:	88 34       	cpi	r24, 0x48	; 72
 132:	41 f4       	brne	.+16     	; 0x144 <TWI_Address_Select+0x42>
	{
		return SLA_R_NOT_ACK_SENT;
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWEN) ; //I should write on TWDR before clear flag 
	while(!(TWCR & (1<<TWINT)));
	status = TWSR & 0xF8;
	if(status == SLA_W_ACK_STATE)
	{
		return SLA_W_ACK_SENT;
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	08 95       	ret
	}
	else if(status == SLA_W_NOT_ACK_STATE)
	{
		return SLA_W_NOT_ACK_SENT;
 13c:	84 e0       	ldi	r24, 0x04	; 4
 13e:	08 95       	ret
	}
	else if(status == SLA_R_ACK_STATE)
	{
		return SLA_R_ACK_SENT;
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	08 95       	ret
	else if(status == SLA_R_NOT_ACK_STATE)
	{
		return SLA_R_NOT_ACK_SENT;
	}
	else
		return SLA_RW_FAILED;
 144:	87 e0       	ldi	r24, 0x07	; 7
	
}
 146:	08 95       	ret

00000148 <TWI_Data_Event>:
EN_state_t TWI_Data_Event(uint8_t *data, EN_RW_t rw, EN_ACK_STATE_t ack)
{
	if(rw == WRITE)
 148:	61 30       	cpi	r22, 0x01	; 1
 14a:	91 f4       	brne	.+36     	; 0x170 <TWI_Data_Event+0x28>
	{
		TWDR = *data;
 14c:	fc 01       	movw	r30, r24
 14e:	80 81       	ld	r24, Z
 150:	83 b9       	out	0x03, r24	; 3
		TWCR = (1<<TWINT) | (1<<TWEN);
 152:	84 e8       	ldi	r24, 0x84	; 132
 154:	86 bf       	out	0x36, r24	; 54
		while(!(TWCR & (1<<TWINT)));
 156:	06 b6       	in	r0, 0x36	; 54
 158:	07 fe       	sbrs	r0, 7
 15a:	fd cf       	rjmp	.-6      	; 0x156 <TWI_Data_Event+0xe>
		status = TWSR & 0xF8;
 15c:	81 b1       	in	r24, 0x01	; 1
 15e:	88 7f       	andi	r24, 0xF8	; 248
 160:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (status == DATA_WRITE_ACK_STATE)
 164:	88 32       	cpi	r24, 0x28	; 40
 166:	01 f1       	breq	.+64     	; 0x1a8 <TWI_Data_Event+0x60>
		{
			return DATA_WRITE_ACK_SENT;
		} 
		else if(status == DATA_WRITE_ACK_STATE)
 168:	88 32       	cpi	r24, 0x28	; 40
 16a:	01 f5       	brne	.+64     	; 0x1ac <TWI_Data_Event+0x64>
		{
			return DATA_WRITE_NACK_SENT;
 16c:	89 e0       	ldi	r24, 0x09	; 9
 16e:	08 95       	ret
		}
		else
			return DATA_WRITE_FAILED;
	}
	else if(rw == READ)
 170:	61 11       	cpse	r22, r1
 172:	19 c0       	rjmp	.+50     	; 0x1a6 <TWI_Data_Event+0x5e>
	{
		if(ack == ACK)
 174:	41 11       	cpse	r20, r1
 176:	03 c0       	rjmp	.+6      	; 0x17e <TWI_Data_Event+0x36>
		{
			TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);/* Enable TWI, generation of ack*/
 178:	24 ec       	ldi	r18, 0xC4	; 196
 17a:	26 bf       	out	0x36, r18	; 54
 17c:	04 c0       	rjmp	.+8      	; 0x186 <TWI_Data_Event+0x3e>
		}
		else if(ack == ACK)
 17e:	41 11       	cpse	r20, r1
 180:	02 c0       	rjmp	.+4      	; 0x186 <TWI_Data_Event+0x3e>
		{
			TWCR = (1<<TWEN) | (1<<TWINT);/* Enable TWI, no ack*/
 182:	24 e8       	ldi	r18, 0x84	; 132
 184:	26 bf       	out	0x36, r18	; 54
		}
		while(!(TWCR & (1<<TWINT))); //Wait until TWI finish its current job
 186:	06 b6       	in	r0, 0x36	; 54
 188:	07 fe       	sbrs	r0, 7
 18a:	fd cf       	rjmp	.-6      	; 0x186 <TWI_Data_Event+0x3e>
		*data = TWDR;	//Read Data
 18c:	23 b1       	in	r18, 0x03	; 3
 18e:	fc 01       	movw	r30, r24
 190:	20 83       	st	Z, r18
		status = TWSR & 0xF8;
 192:	81 b1       	in	r24, 0x01	; 1
 194:	88 7f       	andi	r24, 0xF8	; 248
 196:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (status == DATA_READ_ACK_STATE)
 19a:	80 35       	cpi	r24, 0x50	; 80
 19c:	49 f0       	breq	.+18     	; 0x1b0 <TWI_Data_Event+0x68>
		{
			return DATA_READ_ACK_SENT;
		}
		else if(status == DATA_READ_ACK_STATE)
 19e:	80 35       	cpi	r24, 0x50	; 80
 1a0:	49 f4       	brne	.+18     	; 0x1b4 <TWI_Data_Event+0x6c>
		{
			return DATA_READ_NACK_SENT;
 1a2:	8c e0       	ldi	r24, 0x0C	; 12
 1a4:	08 95       	ret
		else
			return DATA_READ_FAILED;
		
	}
	
}
 1a6:	08 95       	ret
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT)));
		status = TWSR & 0xF8;
		if (status == DATA_WRITE_ACK_STATE)
		{
			return DATA_WRITE_ACK_SENT;
 1a8:	88 e0       	ldi	r24, 0x08	; 8
 1aa:	08 95       	ret
		else if(status == DATA_WRITE_ACK_STATE)
		{
			return DATA_WRITE_NACK_SENT;
		}
		else
			return DATA_WRITE_FAILED;
 1ac:	8a e0       	ldi	r24, 0x0A	; 10
 1ae:	08 95       	ret
		while(!(TWCR & (1<<TWINT))); //Wait until TWI finish its current job
		*data = TWDR;	//Read Data
		status = TWSR & 0xF8;
		if (status == DATA_READ_ACK_STATE)
		{
			return DATA_READ_ACK_SENT;
 1b0:	8b e0       	ldi	r24, 0x0B	; 11
 1b2:	08 95       	ret
		else if(status == DATA_READ_ACK_STATE)
		{
			return DATA_READ_NACK_SENT;
		}
		else
			return DATA_READ_FAILED;
 1b4:	8d e0       	ldi	r24, 0x0D	; 13
		
	}
	
}
 1b6:	08 95       	ret

000001b8 <TWI_Stop>:
void TWI_Stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); //Enable TWI, Generate stop
 1b8:	84 e9       	ldi	r24, 0x94	; 148
 1ba:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT))); //Wait until stop condition execution
 1bc:	06 b6       	in	r0, 0x36	; 54
 1be:	07 fe       	sbrs	r0, 7
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <TWI_Stop+0x4>
		
}
 1c2:	08 95       	ret

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
