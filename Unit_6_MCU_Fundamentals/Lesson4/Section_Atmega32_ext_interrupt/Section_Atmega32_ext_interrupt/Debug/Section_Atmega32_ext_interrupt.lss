
Section_Atmega32_ext_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e7  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f9  00000000  00000000  00000a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000397  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  000013b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000323  00000000  00000000  000018d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001bfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_1>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_2>
   c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "Application/application.h"

int main(void)
{
	//make pin(5, 6, 7) as output in PORTD
	DDRD |= (0b111 << 5);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 6e       	ori	r24, 0xE0	; 224
  70:	81 bb       	out	0x11, r24	; 17
	//INT0 occurs when "any logical change"
	MCUCR |= (0b01 << 0); 
  72:	85 b7       	in	r24, 0x35	; 53
  74:	81 60       	ori	r24, 0x01	; 1
  76:	85 bf       	out	0x35, r24	; 53
	// INT1 occurs when "rising edge"
	MCUCR |= (0b11 << 2);
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	8c 60       	ori	r24, 0x0C	; 12
  7c:	85 bf       	out	0x35, r24	; 53
	// INT2 occurs when "Falling edge"
	CLR_PIN(MCUCSR, 6);
  7e:	84 b7       	in	r24, 0x34	; 52
  80:	8f 7b       	andi	r24, 0xBF	; 191
  82:	84 bf       	out	0x34, r24	; 52
	//Enable all external interrupts
	GICR |= (0b111<<5);
  84:	8b b7       	in	r24, 0x3b	; 59
  86:	80 6e       	ori	r24, 0xE0	; 224
  88:	8b bf       	out	0x3b, r24	; 59
	//Enable global interrupt
	sei();
  8a:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		CLR_PIN(PORTD, 5);
  8c:	82 b3       	in	r24, 0x12	; 18
  8e:	8f 7d       	andi	r24, 0xDF	; 223
  90:	82 bb       	out	0x12, r24	; 18
		CLR_PIN(PORTD, 6);
  92:	82 b3       	in	r24, 0x12	; 18
  94:	8f 7b       	andi	r24, 0xBF	; 191
  96:	82 bb       	out	0x12, r24	; 18
		CLR_PIN(PORTD, 7);
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	8f 77       	andi	r24, 0x7F	; 127
  9c:	82 bb       	out	0x12, r24	; 18
  9e:	f6 cf       	rjmp	.-20     	; 0x8c <main+0x20>

000000a0 <__vector_1>:
		
    }
}

ISR(EXT_INT_0)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	3f 93       	push	r19
  ae:	4f 93       	push	r20
  b0:	5f 93       	push	r21
  b2:	6f 93       	push	r22
  b4:	7f 93       	push	r23
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	af 93       	push	r26
  bc:	bf 93       	push	r27
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
	SET_PIN(PORTD, 5);
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	82 bb       	out	0x12, r24	; 18
	delay_5s();
  c8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <delay_5s>
	
}
  cc:	ff 91       	pop	r31
  ce:	ef 91       	pop	r30
  d0:	bf 91       	pop	r27
  d2:	af 91       	pop	r26
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	7f 91       	pop	r23
  da:	6f 91       	pop	r22
  dc:	5f 91       	pop	r21
  de:	4f 91       	pop	r20
  e0:	3f 91       	pop	r19
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <__vector_2>:
ISR(EXT_INT_1)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	5f 93       	push	r21
 100:	6f 93       	push	r22
 102:	7f 93       	push	r23
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
	SET_PIN(PORTD, 6);
 110:	82 b3       	in	r24, 0x12	; 18
 112:	80 64       	ori	r24, 0x40	; 64
 114:	82 bb       	out	0x12, r24	; 18
	delay_5s();
 116:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <delay_5s>
}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	7f 91       	pop	r23
 128:	6f 91       	pop	r22
 12a:	5f 91       	pop	r21
 12c:	4f 91       	pop	r20
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_3>:
ISR(EXT_INT_2)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
	SET_PIN(PORTD, 7);
 15e:	82 b3       	in	r24, 0x12	; 18
 160:	80 68       	ori	r24, 0x80	; 128
 162:	82 bb       	out	0x12, r24	; 18
	delay_5s();
 164:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <delay_5s>
	
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	bf 91       	pop	r27
 16e:	af 91       	pop	r26
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	7f 91       	pop	r23
 176:	6f 91       	pop	r22
 178:	5f 91       	pop	r21
 17a:	4f 91       	pop	r20
 17c:	3f 91       	pop	r19
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <TIMER_start>:
    TCNT0 = 0x00;
}
void TIMER_start(uint16_t preScalar, uint32_t number_of_overflow)
{
    uint32_t overflowCounter = 0;
    switch (preScalar)
 18a:	80 34       	cpi	r24, 0x40	; 64
 18c:	91 05       	cpc	r25, r1
 18e:	b9 f0       	breq	.+46     	; 0x1be <TIMER_start+0x34>
 190:	30 f4       	brcc	.+12     	; 0x19e <TIMER_start+0x14>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	91 05       	cpc	r25, r1
 196:	59 f0       	breq	.+22     	; 0x1ae <TIMER_start+0x24>
 198:	08 97       	sbiw	r24, 0x08	; 8
 19a:	69 f0       	breq	.+26     	; 0x1b6 <TIMER_start+0x2c>
 19c:	13 c0       	rjmp	.+38     	; 0x1c4 <TIMER_start+0x3a>
 19e:	81 15       	cp	r24, r1
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	92 07       	cpc	r25, r18
 1a4:	91 f0       	breq	.+36     	; 0x1ca <TIMER_start+0x40>
 1a6:	81 15       	cp	r24, r1
 1a8:	94 40       	sbci	r25, 0x04	; 4
 1aa:	99 f0       	breq	.+38     	; 0x1d2 <TIMER_start+0x48>
 1ac:	0b c0       	rjmp	.+22     	; 0x1c4 <TIMER_start+0x3a>
    {
    case 1:
        TCCR0 |= (1 << 0); // set pin0
 1ae:	83 b7       	in	r24, 0x33	; 51
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	83 bf       	out	0x33, r24	; 51
        break;
 1b4:	07 c0       	rjmp	.+14     	; 0x1c4 <TIMER_start+0x3a>
    case 8:
        TCCR0 |= (1 << 1); // set pin1
 1b6:	83 b7       	in	r24, 0x33	; 51
 1b8:	82 60       	ori	r24, 0x02	; 2
 1ba:	83 bf       	out	0x33, r24	; 51
        break;
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <TIMER_start+0x3a>
    case 64:
        TCCR0 |= 3; // set pin0 and pin1
 1be:	83 b7       	in	r24, 0x33	; 51
 1c0:	83 60       	ori	r24, 0x03	; 3
 1c2:	83 bf       	out	0x33, r24	; 51
    TCCR0 = 0X00; // Normal mode
    // 2. Set timer initial value to 0
    TCNT0 = 0x00;
}
void TIMER_start(uint16_t preScalar, uint32_t number_of_overflow)
{
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	10 c0       	rjmp	.+32     	; 0x1ea <TIMER_start+0x60>
        break;
    case 64:
        TCCR0 |= 3; // set pin0 and pin1
        break;
    case 256:
        TCCR0 |= (1 << 2); // set pin2
 1ca:	83 b7       	in	r24, 0x33	; 51
 1cc:	84 60       	ori	r24, 0x04	; 4
 1ce:	83 bf       	out	0x33, r24	; 51
        break;
 1d0:	f9 cf       	rjmp	.-14     	; 0x1c4 <TIMER_start+0x3a>
    case 1024:
        TCCR0 |= 5; // set pin0 and pin2
 1d2:	83 b7       	in	r24, 0x33	; 51
 1d4:	85 60       	ori	r24, 0x05	; 5
 1d6:	83 bf       	out	0x33, r24	; 51
        break;
 1d8:	f5 cf       	rjmp	.-22     	; 0x1c4 <TIMER_start+0x3a>
    }
    // Repeated number of overflow times
    while (overflowCounter < number_of_overflow)
    {
        // wait the overflow flat to be set
        while ((TIFR & (1 << 0)) == 0);
 1da:	08 b6       	in	r0, 0x38	; 56
 1dc:	00 fe       	sbrs	r0, 0
 1de:	fd cf       	rjmp	.-6      	; 0x1da <TIMER_start+0x50>
        // Clear the overflow flag
        TIFR |= (1 << 0);
 1e0:	88 b7       	in	r24, 0x38	; 56
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	88 bf       	out	0x38, r24	; 56
        overflowCounter++;
 1e6:	2f 5f       	subi	r18, 0xFF	; 255
 1e8:	3f 4f       	sbci	r19, 0xFF	; 255
    default:
        // Error handling
        break;
    }
    // Repeated number of overflow times
    while (overflowCounter < number_of_overflow)
 1ea:	26 17       	cp	r18, r22
 1ec:	37 07       	cpc	r19, r23
 1ee:	a8 f3       	brcs	.-22     	; 0x1da <TIMER_start+0x50>
        while ((TIFR & (1 << 0)) == 0);
        // Clear the overflow flag
        TIFR |= (1 << 0);
        overflowCounter++;
    }
}
 1f0:	08 95       	ret

000001f2 <TIMER_stop>:
void TIMER_stop(void)
{
    // Timer stop
    TCCR0 = 0x00;
 1f2:	13 be       	out	0x33, r1	; 51
 1f4:	08 95       	ret

000001f6 <delay_5s>:
}

void delay_5s(void)
{
	TIMER_start(256, 77);
 1f6:	6d e4       	ldi	r22, 0x4D	; 77
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 c5 00 	call	0x18a	; 0x18a <TIMER_start>
	TIMER_stop();
 202:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <TIMER_stop>
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
