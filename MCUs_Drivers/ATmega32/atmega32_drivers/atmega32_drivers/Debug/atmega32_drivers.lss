
atmega32_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001c4  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b17  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ec  00000000  00000000  00000ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a8  00000000  00000000  000016ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00001d54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047a  00000000  00000000  00001f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003cf  00000000  00000000  0000239e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0000276d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  7a:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Kick>:
}

void LCD_Kick(void)
{
	/*Enable pulse*/
	LCD_Control_Port |= (1<<EN);// Enable High
  82:	8b b3       	in	r24, 0x1b	; 27
  84:	84 60       	ori	r24, 0x04	; 4
  86:	8b bb       	out	0x1b, r24	; 27
		delay_ms(1);	//minimum delay of 450ns
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 96 00 	call	0x12c	; 0x12c <delay_ms>
	LCD_Control_Port &= ~(1<<EN);//Enable Low
  90:	8b b3       	in	r24, 0x1b	; 27
  92:	8b 7f       	andi	r24, 0xFB	; 251
  94:	8b bb       	out	0x1b, r24	; 27
  96:	08 95       	ret

00000098 <LCD_Send_A_Command>:
	LCD_Send_A_Command(LCD_ENTRY_INC);	//Auto increment
	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
}
void LCD_Send_A_Command(unsigned char command)
{
  98:	cf 93       	push	r28
  9a:	c8 2f       	mov	r28, r24
	LCD_Kick();
	delay_ms(3);
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_Data_Port = (LCD_Control_Port & 0x0F) | (command & 0xF0);//Sending upper niblle
  9c:	8b b3       	in	r24, 0x1b	; 27
  9e:	8f 70       	andi	r24, 0x0F	; 15
  a0:	9c 2f       	mov	r25, r28
  a2:	90 7f       	andi	r25, 0xF0	; 240
  a4:	89 2b       	or	r24, r25
  a6:	85 bb       	out	0x15, r24	; 21
	LCD_Control_Port &= ~(1<<RS | 1<<RW);//command register
  a8:	8b b3       	in	r24, 0x1b	; 27
  aa:	8c 7f       	andi	r24, 0xFC	; 252
  ac:	8b bb       	out	0x1b, r24	; 27
	LCD_Kick();
  ae:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Kick>
	delay_ms(1);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 96 00 	call	0x12c	; 0x12c <delay_ms>
	LCD_Data_Port = (LCD_Control_Port & 0x0F) | (command << 4 );//Sending upper niblle
  ba:	2b b3       	in	r18, 0x1b	; 27
  bc:	30 e1       	ldi	r19, 0x10	; 16
  be:	c3 9f       	mul	r28, r19
  c0:	c0 01       	movw	r24, r0
  c2:	11 24       	eor	r1, r1
  c4:	92 2f       	mov	r25, r18
  c6:	9f 70       	andi	r25, 0x0F	; 15
  c8:	89 2b       	or	r24, r25
  ca:	85 bb       	out	0x15, r24	; 21
	LCD_Kick();
  cc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Kick>
	delay_ms(2);
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 96 00 	call	0x12c	; 0x12c <delay_ms>
	#endif
}
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <LCD_Init>:
 *  Author: Ali Mohamed Taima
 */ 
#include "lcd.h"
void LCD_Init(void)
{
	LCD_Control_Dir |= (1<<RS|1<<EN|1<<RW);//make control pins as output
  dc:	8a b3       	in	r24, 0x1a	; 26
  de:	87 60       	ori	r24, 0x07	; 7
  e0:	8a bb       	out	0x1a, r24	; 26
	LCD_Control_Port &= (1<<RS|1<<EN|1<<RW); //make sure that output is 0
  e2:	8b b3       	in	r24, 0x1b	; 27
  e4:	87 70       	andi	r24, 0x07	; 7
  e6:	8b bb       	out	0x1b, r24	; 27
	//make data port as output
	LCD_Data_Dir = 0xFF;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	84 bb       	out	0x14, r24	; 20
	delay_ms(20);
  ec:	84 e1       	ldi	r24, 0x14	; 20
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 96 00 	call	0x12c	; 0x12c <delay_ms>
	#ifdef EIGHT_BIT_MODE
	LCD_Send_A_Command(LCD_FUNCTION_8BIT_2LINES);
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_Send_A_Command(0x02); //Send for 4bit initialization of LCD
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_FUNCTION_4BIT_2LINES);
  fa:	88 e2       	ldi	r24, 0x28	; 40
  fc:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_A_Command>
	#endif
	
	LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);
 100:	8f e0       	ldi	r24, 0x0F	; 15
 102:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_ENTRY_INC);	//Auto increment
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_CLEAR_SCREEN);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_Send_A_Command>
 118:	08 95       	ret

0000011a <main>:
#include "Application/application.h"


int main(void)
{
	LCD_Init();
 11a:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Init>

	UART_Init();
 11e:	0e 94 a7 00 	call	0x14e	; 0x14e <UART_Init>
	//UART_Send('A');
	//UART_Send('B');
	//UART_Send('C');
	UART_Send_Str("Ali Taima");
 122:	80 e6       	ldi	r24, 0x60	; 96
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 ca 00 	call	0x194	; 0x194 <UART_Send_Str>
 12a:	ff cf       	rjmp	.-2      	; 0x12a <main+0x10>

0000012c <delay_ms>:
}
void delay_ms(uint32_t t)
{
	uint32_t i, j;

	for(i = 0;i<t;i++)
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	50 e0       	ldi	r21, 0x00	; 0
 130:	0a c0       	rjmp	.+20     	; 0x146 <delay_ms+0x1a>
		for(j = 0; j<255; j++);
 132:	2f 5f       	subi	r18, 0xFF	; 255
 134:	3f 4f       	sbci	r19, 0xFF	; 255
 136:	02 c0       	rjmp	.+4      	; 0x13c <delay_ms+0x10>
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	2f 3f       	cpi	r18, 0xFF	; 255
 13e:	31 05       	cpc	r19, r1
 140:	c0 f3       	brcs	.-16     	; 0x132 <delay_ms+0x6>
}
void delay_ms(uint32_t t)
{
	uint32_t i, j;

	for(i = 0;i<t;i++)
 142:	4f 5f       	subi	r20, 0xFF	; 255
 144:	5f 4f       	sbci	r21, 0xFF	; 255
 146:	48 17       	cp	r20, r24
 148:	59 07       	cpc	r21, r25
 14a:	b0 f3       	brcs	.-20     	; 0x138 <delay_ms+0xc>
		for(j = 0; j<255; j++);
}
 14c:	08 95       	ret

0000014e <UART_Init>:
}
char UART_Receive(void)
{  
	while (!READ_PIN(UCSRA, 7));
	return UDR;
}
 14e:	10 bc       	out	0x20, r1	; 32
 150:	83 e3       	ldi	r24, 0x33	; 51
 152:	89 b9       	out	0x09, r24	; 9
 154:	80 b5       	in	r24, 0x20	; 32
 156:	80 68       	ori	r24, 0x80	; 128
 158:	80 bd       	out	0x20, r24	; 32
 15a:	80 b5       	in	r24, 0x20	; 32
 15c:	8f 7b       	andi	r24, 0xBF	; 191
 15e:	80 bd       	out	0x20, r24	; 32
 160:	80 b5       	in	r24, 0x20	; 32
 162:	8f 7d       	andi	r24, 0xDF	; 223
 164:	80 bd       	out	0x20, r24	; 32
 166:	80 b5       	in	r24, 0x20	; 32
 168:	8f 7e       	andi	r24, 0xEF	; 239
 16a:	80 bd       	out	0x20, r24	; 32
 16c:	80 b5       	in	r24, 0x20	; 32
 16e:	87 7f       	andi	r24, 0xF7	; 247
 170:	80 bd       	out	0x20, r24	; 32
 172:	80 b5       	in	r24, 0x20	; 32
 174:	82 60       	ori	r24, 0x02	; 2
 176:	80 bd       	out	0x20, r24	; 32
 178:	80 b5       	in	r24, 0x20	; 32
 17a:	84 60       	ori	r24, 0x04	; 4
 17c:	80 bd       	out	0x20, r24	; 32
 17e:	8a b1       	in	r24, 0x0a	; 10
 180:	84 60       	ori	r24, 0x04	; 4
 182:	8a b9       	out	0x0a, r24	; 10
 184:	8a b1       	in	r24, 0x0a	; 10
 186:	88 61       	ori	r24, 0x18	; 24
 188:	8a b9       	out	0x0a, r24	; 10
 18a:	08 95       	ret

0000018c <UART_Send>:
 18c:	5d 9b       	sbis	0x0b, 5	; 11
 18e:	fe cf       	rjmp	.-4      	; 0x18c <UART_Send>
 190:	8c b9       	out	0x0c, r24	; 12
 192:	08 95       	ret

00000194 <UART_Send_Str>:

void UART_Send_Str(uint8_t* str)
{
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i = 0;i<str[i];i++)
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <UART_Send_Str+0x12>
	{
		UART_Send(str[i]);
 1a0:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Send>
}

void UART_Send_Str(uint8_t* str)
{
	uint8_t i;
	for(i = 0;i<str[i];i++)
 1a4:	cf 5f       	subi	r28, 0xFF	; 255
 1a6:	f8 01       	movw	r30, r16
 1a8:	ec 0f       	add	r30, r28
 1aa:	f1 1d       	adc	r31, r1
 1ac:	80 81       	ld	r24, Z
 1ae:	c8 17       	cp	r28, r24
 1b0:	b8 f3       	brcs	.-18     	; 0x1a0 <UART_Send_Str+0xc>
	{
		UART_Send(str[i]);
	}
	UART_Send(DefaultStop);
 1b2:	8d e0       	ldi	r24, 0x0D	; 13
 1b4:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Send>
}
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	08 95       	ret

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
