
atmega32_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000ce  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072b  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000651  00000000  00000000  00000943  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000378  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  0000130c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000132  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001866  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
*  author: ali mohamed taima
*/
#include "_7segment.h"
int main(void)
{
	DDRC = 0xff;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 bb       	out	0x14, r24	; 20
	int i;
	while (1)
	{
		for( i =0; i<10; i++)
  86:	c0 e0       	ldi	r28, 0x00	; 0
  88:	d0 e0       	ldi	r29, 0x00	; 0
  8a:	0a c0       	rjmp	.+20     	; 0xa0 <main+0x1e>
		{
			PORTC = _7SEG_COM_AN[i];
  8c:	fe 01       	movw	r30, r28
  8e:	e0 5a       	subi	r30, 0xA0	; 160
  90:	ff 4f       	sbci	r31, 0xFF	; 255
  92:	80 81       	ld	r24, Z
  94:	85 bb       	out	0x15, r24	; 21
			delay_ms(400);
  96:	80 e9       	ldi	r24, 0x90	; 144
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	0e 94 54 00 	call	0xa8	; 0xa8 <delay_ms>
{
	DDRC = 0xff;
	int i;
	while (1)
	{
		for( i =0; i<10; i++)
  9e:	21 96       	adiw	r28, 0x01	; 1
  a0:	ca 30       	cpi	r28, 0x0A	; 10
  a2:	d1 05       	cpc	r29, r1
  a4:	9c f3       	brlt	.-26     	; 0x8c <main+0xa>
  a6:	ef cf       	rjmp	.-34     	; 0x86 <main+0x4>

000000a8 <delay_ms>:
}
void delay_ms(uint32_t t)
{
	uint32_t i, j;

	for(i = 0;i<t;i++)
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	0a c0       	rjmp	.+20     	; 0xc2 <delay_ms+0x1a>
		for(j = 0; j<255; j++);
  ae:	2f 5f       	subi	r18, 0xFF	; 255
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <delay_ms+0x10>
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	2f 3f       	cpi	r18, 0xFF	; 255
  ba:	31 05       	cpc	r19, r1
  bc:	c0 f3       	brcs	.-16     	; 0xae <delay_ms+0x6>
}
void delay_ms(uint32_t t)
{
	uint32_t i, j;

	for(i = 0;i<t;i++)
  be:	4f 5f       	subi	r20, 0xFF	; 255
  c0:	5f 4f       	sbci	r21, 0xFF	; 255
  c2:	48 17       	cp	r20, r24
  c4:	59 07       	cpc	r21, r25
  c6:	b0 f3       	brcs	.-20     	; 0xb4 <delay_ms+0xc>
		for(j = 0; j<255; j++);
}
  c8:	08 95       	ret

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
